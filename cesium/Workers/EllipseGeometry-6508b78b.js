define(["exports","./Transforms-e2d4a55a","./Matrix2-e1298525","./Matrix3-41c58dde","./Check-6ede7e26","./ComponentDatatype-cf1fa08e","./defaultValue-fe22d8c0","./EllipseGeometryLibrary-21262a28","./GeometryAttribute-13da9466","./GeometryAttributes-ad136444","./GeometryInstance-34d9e21e","./GeometryOffsetAttribute-9ad0019c","./GeometryPipeline-03bc5709","./IndexDatatype-2643aa47","./Math-0a2ac845","./VertexFormat-030f11ff"],(function(t,e,r,i,n,o,a,s,l,u,m,c,p,y,d,f){"use strict";const h=new i.Cartesian3,A=new i.Cartesian3,x=new i.Cartesian3,g=new i.Cartesian3,_=new r.Cartesian2,b=new i.Matrix3,C=new i.Matrix3,w=new e.Quaternion,M=new i.Cartesian3,E=new i.Cartesian3,I=new i.Cartesian3,T=new i.Cartographic,G=new i.Cartesian3,v=new r.Cartesian2,N=new r.Cartesian2;function P(t,n,m){const p=n.vertexFormat,y=n.center,d=n.semiMajorAxis,f=n.semiMinorAxis,g=n.ellipsoid,P=n.stRotation,V=m?t.length/3*2:t.length/3,D=n.shadowVolume,F=p.st?new Float32Array(2*V):void 0,O=p.normal?new Float32Array(3*V):void 0,S=p.tangent?new Float32Array(3*V):void 0,L=p.bitangent?new Float32Array(3*V):void 0,R=D?new Float32Array(3*V):void 0;let j=0,k=M,z=E,B=I;const Y=new e.GeographicProjection(g),H=Y.project(g.cartesianToCartographic(y,T),G),U=g.scaleToGeodeticSurface(y,h);g.geodeticSurfaceNormal(U,U);let Q=b,W=C;if(0!==P){let t=e.Quaternion.fromAxisAngle(U,P,w);Q=i.Matrix3.fromQuaternion(t,Q),t=e.Quaternion.fromAxisAngle(U,-P,w),W=i.Matrix3.fromQuaternion(t,W)}else Q=i.Matrix3.clone(i.Matrix3.IDENTITY,Q),W=i.Matrix3.clone(i.Matrix3.IDENTITY,W);const q=r.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,v),J=r.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,N);let Z=t.length;const K=m?Z:0,X=K/3*2;for(let e=0;e<Z;e+=3){const r=e+1,n=e+2,o=i.Cartesian3.fromArray(t,e,h);if(p.st){const t=i.Matrix3.multiplyByVector(Q,o,A),e=Y.project(g.cartesianToCartographic(t,T),x);i.Cartesian3.subtract(e,H,e),_.x=(e.x+d)/(2*d),_.y=(e.y+f)/(2*f),q.x=Math.min(_.x,q.x),q.y=Math.min(_.y,q.y),J.x=Math.max(_.x,J.x),J.y=Math.max(_.y,J.y),m&&(F[j+X]=_.x,F[j+1+X]=_.y),F[j++]=_.x,F[j++]=_.y}(p.normal||p.tangent||p.bitangent||D)&&(k=g.geodeticSurfaceNormal(o,k),D&&(R[e+K]=-k.x,R[r+K]=-k.y,R[n+K]=-k.z),(p.normal||p.tangent||p.bitangent)&&((p.tangent||p.bitangent)&&(z=i.Cartesian3.normalize(i.Cartesian3.cross(i.Cartesian3.UNIT_Z,k,z),z),i.Matrix3.multiplyByVector(W,z,z)),p.normal&&(O[e]=k.x,O[r]=k.y,O[n]=k.z,m&&(O[e+K]=-k.x,O[r+K]=-k.y,O[n+K]=-k.z)),p.tangent&&(S[e]=z.x,S[r]=z.y,S[n]=z.z,m&&(S[e+K]=-z.x,S[r+K]=-z.y,S[n+K]=-z.z)),p.bitangent&&(B=i.Cartesian3.normalize(i.Cartesian3.cross(k,z,B),B),L[e]=B.x,L[r]=B.y,L[n]=B.z,m&&(L[e+K]=B.x,L[r+K]=B.y,L[n+K]=B.z))))}if(p.st){Z=F.length;for(let t=0;t<Z;t+=2)F[t]=(F[t]-q.x)/(J.x-q.x),F[t+1]=(F[t+1]-q.y)/(J.y-q.y)}const $=new u.GeometryAttributes;if(p.position){const e=s.EllipseGeometryLibrary.raisePositionsToHeight(t,n,m);$.position=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e})}if(p.st&&($.st=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:F})),p.normal&&($.normal=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:O})),p.tangent&&($.tangent=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:S})),p.bitangent&&($.bitangent=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:L})),D&&($.extrudeDirection=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:R})),m&&a.defined(n.offsetAttribute)){let t=new Uint8Array(V);if(n.offsetAttribute===c.GeometryOffsetAttribute.TOP)t=t.fill(1,0,V/2);else{const e=n.offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}$.applyOffset=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return $}function V(t){const e=new Array(t*(t+1)*12-6);let r,i,n,o,a,s=0;for(r=0,n=1,o=0;o<3;o++)e[s++]=n++,e[s++]=r,e[s++]=n;for(o=2;o<t+1;++o){for(n=o*(o+1)-1,r=(o-1)*o-1,e[s++]=n++,e[s++]=r,e[s++]=n,i=2*o,a=0;a<i-1;++a)e[s++]=n,e[s++]=r++,e[s++]=r,e[s++]=n++,e[s++]=r,e[s++]=n;e[s++]=n++,e[s++]=r,e[s++]=n}for(i=2*t,++n,++r,o=0;o<i-1;++o)e[s++]=n,e[s++]=r++,e[s++]=r,e[s++]=n++,e[s++]=r,e[s++]=n;for(e[s++]=n,e[s++]=r++,e[s++]=r,e[s++]=n++,e[s++]=r++,e[s++]=r,++r,o=t-1;o>1;--o){for(e[s++]=r++,e[s++]=r,e[s++]=n,i=2*o,a=0;a<i-1;++a)e[s++]=n,e[s++]=r++,e[s++]=r,e[s++]=n++,e[s++]=r,e[s++]=n;e[s++]=r++,e[s++]=r++,e[s++]=n++}for(o=0;o<3;o++)e[s++]=r++,e[s++]=r,e[s++]=n;return e}let D=new i.Cartesian3;const F=new e.BoundingSphere,O=new e.BoundingSphere;function S(t,e,n,o,a,l,u){const m=s.EllipseGeometryLibrary.computeEllipsePositions({center:t,semiMajorAxis:e,semiMinorAxis:n,rotation:o,granularity:a},!1,!0).outerPositions,c=m.length/3,p=new Array(c);for(let t=0;t<c;++t)p[t]=i.Cartesian3.fromArray(m,3*t);const y=r.Rectangle.fromCartesianArray(p,l,u);return y.width>d.CesiumMath.PI&&(y.north=y.north>0?d.CesiumMath.PI_OVER_TWO-d.CesiumMath.EPSILON7:y.north,y.south=y.south<0?d.CesiumMath.EPSILON7-d.CesiumMath.PI_OVER_TWO:y.south,y.east=d.CesiumMath.PI,y.west=-d.CesiumMath.PI),y}function L(t){const e=(t=a.defaultValue(t,a.defaultValue.EMPTY_OBJECT)).center,r=a.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84),o=t.semiMajorAxis,s=t.semiMinorAxis,l=a.defaultValue(t.granularity,d.CesiumMath.RADIANS_PER_DEGREE),u=a.defaultValue(t.vertexFormat,f.VertexFormat.DEFAULT);if(n.Check.defined("options.center",e),n.Check.typeOf.number("options.semiMajorAxis",o),n.Check.typeOf.number("options.semiMinorAxis",s),o<s)throw new n.DeveloperError("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(l<=0)throw new n.DeveloperError("granularity must be greater than zero.");const m=a.defaultValue(t.height,0),c=a.defaultValue(t.extrudedHeight,m);this._center=i.Cartesian3.clone(e),this._semiMajorAxis=o,this._semiMinorAxis=s,this._ellipsoid=i.Ellipsoid.clone(r),this._rotation=a.defaultValue(t.rotation,0),this._stRotation=a.defaultValue(t.stRotation,0),this._height=Math.max(c,m),this._granularity=l,this._vertexFormat=f.VertexFormat.clone(u),this._extrudedHeight=Math.min(c,m),this._shadowVolume=a.defaultValue(t.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=t.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0}L.packedLength=i.Cartesian3.packedLength+i.Ellipsoid.packedLength+f.VertexFormat.packedLength+9,L.pack=function(t,e,r){return n.Check.defined("value",t),n.Check.defined("array",e),r=a.defaultValue(r,0),i.Cartesian3.pack(t._center,e,r),r+=i.Cartesian3.packedLength,i.Ellipsoid.pack(t._ellipsoid,e,r),r+=i.Ellipsoid.packedLength,f.VertexFormat.pack(t._vertexFormat,e,r),r+=f.VertexFormat.packedLength,e[r++]=t._semiMajorAxis,e[r++]=t._semiMinorAxis,e[r++]=t._rotation,e[r++]=t._stRotation,e[r++]=t._height,e[r++]=t._granularity,e[r++]=t._extrudedHeight,e[r++]=t._shadowVolume?1:0,e[r]=a.defaultValue(t._offsetAttribute,-1),e};const R=new i.Cartesian3,j=new i.Ellipsoid,k=new f.VertexFormat,z={center:R,ellipsoid:j,vertexFormat:k,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};L.unpack=function(t,e,r){n.Check.defined("array",t),e=a.defaultValue(e,0);const o=i.Cartesian3.unpack(t,e,R);e+=i.Cartesian3.packedLength;const s=i.Ellipsoid.unpack(t,e,j);e+=i.Ellipsoid.packedLength;const l=f.VertexFormat.unpack(t,e,k);e+=f.VertexFormat.packedLength;const u=t[e++],m=t[e++],c=t[e++],p=t[e++],y=t[e++],d=t[e++],h=t[e++],A=1===t[e++],x=t[e];return a.defined(r)?(r._center=i.Cartesian3.clone(o,r._center),r._ellipsoid=i.Ellipsoid.clone(s,r._ellipsoid),r._vertexFormat=f.VertexFormat.clone(l,r._vertexFormat),r._semiMajorAxis=u,r._semiMinorAxis=m,r._rotation=c,r._stRotation=p,r._height=y,r._granularity=d,r._extrudedHeight=h,r._shadowVolume=A,r._offsetAttribute=-1===x?void 0:x,r):(z.height=y,z.extrudedHeight=h,z.granularity=d,z.stRotation=p,z.rotation=c,z.semiMajorAxis=u,z.semiMinorAxis=m,z.shadowVolume=A,z.offsetAttribute=-1===x?void 0:x,new L(z))},L.computeRectangle=function(t,e){const r=(t=a.defaultValue(t,a.defaultValue.EMPTY_OBJECT)).center,o=a.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84),s=t.semiMajorAxis,l=t.semiMinorAxis,u=a.defaultValue(t.granularity,d.CesiumMath.RADIANS_PER_DEGREE),m=a.defaultValue(t.rotation,0);if(n.Check.defined("options.center",r),n.Check.typeOf.number("options.semiMajorAxis",s),n.Check.typeOf.number("options.semiMinorAxis",l),s<l)throw new n.DeveloperError("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(u<=0)throw new n.DeveloperError("granularity must be greater than zero.");return S(r,s,l,m,u,o,e)},L.createGeometry=function(t){if(t._semiMajorAxis<=0||t._semiMinorAxis<=0)return;const n=t._height,f=t._extrudedHeight,C=!d.CesiumMath.equalsEpsilon(n,f,0,d.CesiumMath.EPSILON2);t._center=t._ellipsoid.scaleToGeodeticSurface(t._center,t._center);const S={center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:t._ellipsoid,rotation:t._rotation,height:n,granularity:t._granularity,vertexFormat:t._vertexFormat,stRotation:t._stRotation};let L;if(C)S.extrudedHeight=f,S.shadowVolume=t._shadowVolume,S.offsetAttribute=t._offsetAttribute,L=function(t){const n=t.center,d=t.ellipsoid,f=t.semiMajorAxis;let C=i.Cartesian3.multiplyByScalar(d.geodeticSurfaceNormal(n,h),t.height,h);F.center=i.Cartesian3.add(n,C,F.center),F.radius=f,C=i.Cartesian3.multiplyByScalar(d.geodeticSurfaceNormal(n,C),t.extrudedHeight,C),O.center=i.Cartesian3.add(n,C,O.center),O.radius=f;const D=s.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!0),S=D.positions,L=D.numPts,R=D.outerPositions,j=e.BoundingSphere.union(F,O),k=P(S,t,!0);let z=V(L);const B=z.length;z.length=2*B;const Y=S.length/3;for(let t=0;t<B;t+=3)z[t+B]=z[t+2]+Y,z[t+1+B]=z[t+1]+Y,z[t+2+B]=z[t]+Y;const H=y.IndexDatatype.createTypedArray(2*Y/3,z),U=new l.Geometry({attributes:k,indices:H,primitiveType:l.PrimitiveType.TRIANGLES}),Q=function(t,n){const s=n.vertexFormat,m=n.center,p=n.semiMajorAxis,y=n.semiMinorAxis,d=n.ellipsoid,f=n.height,C=n.extrudedHeight,P=n.stRotation,V=t.length/3*2,D=new Float64Array(3*V),F=s.st?new Float32Array(2*V):void 0,O=s.normal?new Float32Array(3*V):void 0,S=s.tangent?new Float32Array(3*V):void 0,L=s.bitangent?new Float32Array(3*V):void 0,R=n.shadowVolume,j=R?new Float32Array(3*V):void 0;let k=0,z=M,B=E,Y=I;const H=new e.GeographicProjection(d),U=H.project(d.cartesianToCartographic(m,T),G),Q=d.scaleToGeodeticSurface(m,h);d.geodeticSurfaceNormal(Q,Q);const W=e.Quaternion.fromAxisAngle(Q,P,w),q=i.Matrix3.fromQuaternion(W,b),J=r.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,v),Z=r.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,N);let K=t.length;const X=K/3*2;for(let e=0;e<K;e+=3){const r=e+1,n=e+2;let o,a=i.Cartesian3.fromArray(t,e,h);if(s.st){const t=i.Matrix3.multiplyByVector(q,a,A),e=H.project(d.cartesianToCartographic(t,T),x);i.Cartesian3.subtract(e,U,e),_.x=(e.x+p)/(2*p),_.y=(e.y+y)/(2*y),J.x=Math.min(_.x,J.x),J.y=Math.min(_.y,J.y),Z.x=Math.max(_.x,Z.x),Z.y=Math.max(_.y,Z.y),F[k+X]=_.x,F[k+1+X]=_.y,F[k++]=_.x,F[k++]=_.y}a=d.scaleToGeodeticSurface(a,a),o=i.Cartesian3.clone(a,A),z=d.geodeticSurfaceNormal(a,z),R&&(j[e+K]=-z.x,j[r+K]=-z.y,j[n+K]=-z.z);let l=i.Cartesian3.multiplyByScalar(z,f,g);if(a=i.Cartesian3.add(a,l,a),l=i.Cartesian3.multiplyByScalar(z,C,l),o=i.Cartesian3.add(o,l,o),s.position&&(D[e+K]=o.x,D[r+K]=o.y,D[n+K]=o.z,D[e]=a.x,D[r]=a.y,D[n]=a.z),s.normal||s.tangent||s.bitangent){Y=i.Cartesian3.clone(z,Y);const l=i.Cartesian3.fromArray(t,(e+3)%K,g);i.Cartesian3.subtract(l,a,l);const u=i.Cartesian3.subtract(o,a,x);z=i.Cartesian3.normalize(i.Cartesian3.cross(u,l,z),z),s.normal&&(O[e]=z.x,O[r]=z.y,O[n]=z.z,O[e+K]=z.x,O[r+K]=z.y,O[n+K]=z.z),s.tangent&&(B=i.Cartesian3.normalize(i.Cartesian3.cross(Y,z,B),B),S[e]=B.x,S[r]=B.y,S[n]=B.z,S[e+K]=B.x,S[e+1+K]=B.y,S[e+2+K]=B.z),s.bitangent&&(L[e]=Y.x,L[r]=Y.y,L[n]=Y.z,L[e+K]=Y.x,L[r+K]=Y.y,L[n+K]=Y.z)}}if(s.st){K=F.length;for(let t=0;t<K;t+=2)F[t]=(F[t]-J.x)/(Z.x-J.x),F[t+1]=(F[t+1]-J.y)/(Z.y-J.y)}const $=new u.GeometryAttributes;if(s.position&&($.position=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:D})),s.st&&($.st=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:F})),s.normal&&($.normal=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:O})),s.tangent&&($.tangent=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:S})),s.bitangent&&($.bitangent=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:L})),R&&($.extrudeDirection=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:j})),a.defined(n.offsetAttribute)){let t=new Uint8Array(V);if(n.offsetAttribute===c.GeometryOffsetAttribute.TOP)t=t.fill(1,0,V/2);else{const e=n.offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}$.applyOffset=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return $}(R,t);z=function(t){const e=t.length/3,r=y.IndexDatatype.createTypedArray(e,6*e);let i=0;for(let t=0;t<e;t++){const n=t,o=t+e,a=(n+1)%e,s=a+e;r[i++]=n,r[i++]=o,r[i++]=a,r[i++]=a,r[i++]=o,r[i++]=s}return r}(R);const W=y.IndexDatatype.createTypedArray(2*R.length/3,z),q=new l.Geometry({attributes:Q,indices:W,primitiveType:l.PrimitiveType.TRIANGLES}),J=p.GeometryPipeline.combineInstances([new m.GeometryInstance({geometry:U}),new m.GeometryInstance({geometry:q})]);return{boundingSphere:j,attributes:J[0].attributes,indices:J[0].indices}}(S);else if(L=function(t){const r=t.center;D=i.Cartesian3.multiplyByScalar(t.ellipsoid.geodeticSurfaceNormal(r,D),t.height,D),D=i.Cartesian3.add(r,D,D);const n=new e.BoundingSphere(D,t.semiMajorAxis),o=s.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!1),a=o.positions,l=o.numPts,u=P(a,t,!1);let m=V(l);return m=y.IndexDatatype.createTypedArray(a.length/3,m),{boundingSphere:n,attributes:u,indices:m}}(S),a.defined(t._offsetAttribute)){const e=L.attributes.position.values.length,r=t._offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1,i=new Uint8Array(e/3).fill(r);L.attributes.applyOffset=new l.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:i})}return new l.Geometry({attributes:L.attributes,indices:L.indices,primitiveType:l.PrimitiveType.TRIANGLES,boundingSphere:L.boundingSphere,offsetAttribute:t._offsetAttribute})},L.createShadowVolume=function(t,e,r){const i=t._granularity,n=t._ellipsoid,o=e(i,n),a=r(i,n);return new L({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:n,rotation:t._rotation,stRotation:t._stRotation,granularity:i,extrudedHeight:o,height:a,vertexFormat:f.VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(L.prototype,{rectangle:{get:function(){return a.defined(this._rectangle)||(this._rectangle=S(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return a.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){const e=-t._stRotation;if(0===e)return[0,0,0,1,1,0];const r=s.EllipseGeometryLibrary.computeEllipsePositions({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,rotation:t._rotation,granularity:t._granularity},!1,!0).outerPositions,n=r.length/3,o=new Array(n);for(let t=0;t<n;++t)o[t]=i.Cartesian3.fromArray(r,3*t);const a=t._ellipsoid,u=t.rectangle;return l.Geometry._textureCoordinateRotationPoints(o,e,a,u)}(this)),this._textureCoordinateRotationPoints}}}),t.EllipseGeometry=L}));