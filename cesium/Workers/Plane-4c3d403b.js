define(["exports","./Matrix3-41c58dde","./Matrix2-e1298525","./Check-6ede7e26","./defaultValue-fe22d8c0","./Math-0a2ac845"],(function(e,t,n,a,r,i){"use strict";function o(e,n){if(a.Check.typeOf.object("normal",e),!i.CesiumMath.equalsEpsilon(t.Cartesian3.magnitude(e),1,i.CesiumMath.EPSILON6))throw new a.DeveloperError("normal must be normalized.");a.Check.typeOf.number("distance",n),this.normal=t.Cartesian3.clone(e),this.distance=n}o.fromPointNormal=function(e,n,s){if(a.Check.typeOf.object("point",e),a.Check.typeOf.object("normal",n),!i.CesiumMath.equalsEpsilon(t.Cartesian3.magnitude(n),1,i.CesiumMath.EPSILON6))throw new a.DeveloperError("normal must be normalized.");const c=-t.Cartesian3.dot(n,e);return r.defined(s)?(t.Cartesian3.clone(n,s.normal),s.distance=c,s):new o(n,c)};const s=new t.Cartesian3;o.fromCartesian4=function(e,n){a.Check.typeOf.object("coefficients",e);const c=t.Cartesian3.fromCartesian4(e,s),l=e.w;if(!i.CesiumMath.equalsEpsilon(t.Cartesian3.magnitude(c),1,i.CesiumMath.EPSILON6))throw new a.DeveloperError("normal must be normalized.");return r.defined(n)?(t.Cartesian3.clone(c,n.normal),n.distance=l,n):new o(c,l)},o.getPointDistance=function(e,n){return a.Check.typeOf.object("plane",e),a.Check.typeOf.object("point",n),t.Cartesian3.dot(e.normal,n)+e.distance};const c=new t.Cartesian3;o.projectPointOntoPlane=function(e,n,i){a.Check.typeOf.object("plane",e),a.Check.typeOf.object("point",n),r.defined(i)||(i=new t.Cartesian3);const s=o.getPointDistance(e,n),l=t.Cartesian3.multiplyByScalar(e.normal,s,c);return t.Cartesian3.subtract(n,l,i)};const l=new n.Matrix4,C=new n.Cartesian4,f=new t.Cartesian3;o.transform=function(e,r,i){a.Check.typeOf.object("plane",e),a.Check.typeOf.object("transform",r);const s=e.normal,c=e.distance,m=n.Matrix4.inverseTranspose(r,l);let u=n.Cartesian4.fromElements(s.x,s.y,s.z,c,C);u=n.Matrix4.multiplyByVector(m,u,u);const d=t.Cartesian3.fromCartesian4(u,f);return u=n.Cartesian4.divideByScalar(u,t.Cartesian3.magnitude(d),u),o.fromCartesian4(u,i)},o.clone=function(e,n){return a.Check.typeOf.object("plane",e),r.defined(n)?(t.Cartesian3.clone(e.normal,n.normal),n.distance=e.distance,n):new o(e.normal,e.distance)},o.equals=function(e,n){return a.Check.typeOf.object("left",e),a.Check.typeOf.object("right",n),e.distance===n.distance&&t.Cartesian3.equals(e.normal,n.normal)},o.ORIGIN_XY_PLANE=Object.freeze(new o(t.Cartesian3.UNIT_Z,0)),o.ORIGIN_YZ_PLANE=Object.freeze(new o(t.Cartesian3.UNIT_X,0)),o.ORIGIN_ZX_PLANE=Object.freeze(new o(t.Cartesian3.UNIT_Y,0)),e.Plane=o}));