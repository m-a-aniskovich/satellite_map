/*! For license information please see chunk-XBZSOW3F.js.LICENSE.txt */
import{GeometryOffsetAttribute_default}from"./chunk-W7F5VTH6.js";import{IndexDatatype_default}from"./chunk-J3U6Z5YQ.js";import{GeometryAttributes_default}from"./chunk-SJDXMQSP.js";import{GeometryAttribute_default,Geometry_default,PrimitiveType_default}from"./chunk-OTBRPBCC.js";import{BoundingSphere_default}from"./chunk-D4YHO4NZ.js";import{ComponentDatatype_default}from"./chunk-Z6LPXA7S.js";import{Cartesian3_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import{Math_default}from"./chunk-IZED7ODV.js";import{defaultValue_default}from"./chunk-C53JYYKX.js";import{DeveloperError_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";var defaultRadii=new Cartesian3_default(1,1,1),cos=Math.cos,sin=Math.sin;function EllipsoidOutlineGeometry(t){t=defaultValue_default(t,defaultValue_default.EMPTY_OBJECT);const e=defaultValue_default(t.radii,defaultRadii),i=defaultValue_default(t.innerRadii,e),a=defaultValue_default(t.minimumClock,0),r=defaultValue_default(t.maximumClock,Math_default.TWO_PI),o=defaultValue_default(t.minimumCone,0),n=defaultValue_default(t.maximumCone,Math_default.PI),u=Math.round(defaultValue_default(t.stackPartitions,10)),s=Math.round(defaultValue_default(t.slicePartitions,8)),l=Math.round(defaultValue_default(t.subdivisions,128));if(u<1)throw new DeveloperError_default("options.stackPartitions cannot be less than 1");if(s<0)throw new DeveloperError_default("options.slicePartitions cannot be less than 0");if(l<0)throw new DeveloperError_default("options.subdivisions must be greater than or equal to zero.");if(defined_default(t.offsetAttribute)&&t.offsetAttribute===GeometryOffsetAttribute_default.TOP)throw new DeveloperError_default("GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.");this._radii=Cartesian3_default.clone(e),this._innerRadii=Cartesian3_default.clone(i),this._minimumClock=a,this._maximumClock=r,this._minimumCone=o,this._maximumCone=n,this._stackPartitions=u,this._slicePartitions=s,this._subdivisions=l,this._offsetAttribute=t.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}EllipsoidOutlineGeometry.packedLength=2*Cartesian3_default.packedLength+8,EllipsoidOutlineGeometry.pack=function(t,e,i){if(!defined_default(t))throw new DeveloperError_default("value is required");if(!defined_default(e))throw new DeveloperError_default("array is required");return i=defaultValue_default(i,0),Cartesian3_default.pack(t._radii,e,i),i+=Cartesian3_default.packedLength,Cartesian3_default.pack(t._innerRadii,e,i),i+=Cartesian3_default.packedLength,e[i++]=t._minimumClock,e[i++]=t._maximumClock,e[i++]=t._minimumCone,e[i++]=t._maximumCone,e[i++]=t._stackPartitions,e[i++]=t._slicePartitions,e[i++]=t._subdivisions,e[i]=defaultValue_default(t._offsetAttribute,-1),e};var scratchRadii=new Cartesian3_default,scratchInnerRadii=new Cartesian3_default,scratchOptions={radii:scratchRadii,innerRadii:scratchInnerRadii,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};EllipsoidOutlineGeometry.unpack=function(t,e,i){if(!defined_default(t))throw new DeveloperError_default("array is required");e=defaultValue_default(e,0);const a=Cartesian3_default.unpack(t,e,scratchRadii);e+=Cartesian3_default.packedLength;const r=Cartesian3_default.unpack(t,e,scratchInnerRadii);e+=Cartesian3_default.packedLength;const o=t[e++],n=t[e++],u=t[e++],s=t[e++],l=t[e++],f=t[e++],d=t[e++],m=t[e];return defined_default(i)?(i._radii=Cartesian3_default.clone(a,i._radii),i._innerRadii=Cartesian3_default.clone(r,i._innerRadii),i._minimumClock=o,i._maximumClock=n,i._minimumCone=u,i._maximumCone=s,i._stackPartitions=l,i._slicePartitions=f,i._subdivisions=d,i._offsetAttribute=-1===m?void 0:m,i):(scratchOptions.minimumClock=o,scratchOptions.maximumClock=n,scratchOptions.minimumCone=u,scratchOptions.maximumCone=s,scratchOptions.stackPartitions=l,scratchOptions.slicePartitions=f,scratchOptions.subdivisions=d,scratchOptions.offsetAttribute=-1===m?void 0:m,new EllipsoidOutlineGeometry(scratchOptions))},EllipsoidOutlineGeometry.createGeometry=function(t){const e=t._radii;if(e.x<=0||e.y<=0||e.z<=0)return;const i=t._innerRadii;if(i.x<=0||i.y<=0||i.z<=0)return;const a=t._minimumClock,r=t._maximumClock,o=t._minimumCone,n=t._maximumCone,u=t._subdivisions,s=Ellipsoid_default.fromCartesian3(e);let l=t._slicePartitions+1,f=t._stackPartitions+1;l=Math.round(l*Math.abs(r-a)/Math_default.TWO_PI),f=Math.round(f*Math.abs(n-o)/Math_default.PI),l<2&&(l=2),f<2&&(f=2);let d=0,m=1;const _=i.x!==e.x||i.y!==e.y||i.z!==e.z;let c=!1,p=!1;_&&(m=2,o>0&&(c=!0,d+=l),n<Math.PI&&(p=!0,d+=l));const h=u*m*(f+l),C=new Float64Array(3*h),y=2*(h+d-(l+f)*m),k=IndexDatatype_default.createTypedArray(h,y);let b,O,v,P,A=0;const E=new Array(f),w=new Array(f);for(b=0;b<f;b++)P=o+b*(n-o)/(f-1),E[b]=sin(P),w[b]=cos(P);const x=new Array(u),G=new Array(u);for(b=0;b<u;b++)v=a+b*(r-a)/(u-1),x[b]=sin(v),G[b]=cos(v);for(b=0;b<f;b++)for(O=0;O<u;O++)C[A++]=e.x*E[b]*G[O],C[A++]=e.y*E[b]*x[O],C[A++]=e.z*w[b];if(_)for(b=0;b<f;b++)for(O=0;O<u;O++)C[A++]=i.x*E[b]*G[O],C[A++]=i.y*E[b]*x[O],C[A++]=i.z*w[b];for(E.length=u,w.length=u,b=0;b<u;b++)P=o+b*(n-o)/(u-1),E[b]=sin(P),w[b]=cos(P);for(x.length=l,G.length=l,b=0;b<l;b++)v=a+b*(r-a)/(l-1),x[b]=sin(v),G[b]=cos(v);for(b=0;b<u;b++)for(O=0;O<l;O++)C[A++]=e.x*E[b]*G[O],C[A++]=e.y*E[b]*x[O],C[A++]=e.z*w[b];if(_)for(b=0;b<u;b++)for(O=0;O<l;O++)C[A++]=i.x*E[b]*G[O],C[A++]=i.y*E[b]*x[O],C[A++]=i.z*w[b];for(A=0,b=0;b<f*m;b++){const t=b*u;for(O=0;O<u-1;O++)k[A++]=t+O,k[A++]=t+O+1}let D=f*u*m;for(b=0;b<l;b++)for(O=0;O<u-1;O++)k[A++]=D+b+O*l,k[A++]=D+b+(O+1)*l;if(_)for(D=f*u*m+l*u,b=0;b<l;b++)for(O=0;O<u-1;O++)k[A++]=D+b+O*l,k[A++]=D+b+(O+1)*l;if(_){let t=f*u*m,e=t+u*l;if(c)for(b=0;b<l;b++)k[A++]=t+b,k[A++]=e+b;if(p)for(t+=u*l-l,e+=u*l-l,b=0;b<l;b++)k[A++]=t+b,k[A++]=e+b}const V=new GeometryAttributes_default({position:new GeometryAttribute_default({componentDatatype:ComponentDatatype_default.DOUBLE,componentsPerAttribute:3,values:C})});if(defined_default(t._offsetAttribute)){const e=C.length,i=t._offsetAttribute===GeometryOffsetAttribute_default.NONE?0:1,a=new Uint8Array(e/3).fill(i);V.applyOffset=new GeometryAttribute_default({componentDatatype:ComponentDatatype_default.UNSIGNED_BYTE,componentsPerAttribute:1,values:a})}return new Geometry_default({attributes:V,indices:k,primitiveType:PrimitiveType_default.LINES,boundingSphere:BoundingSphere_default.fromEllipsoid(s),offsetAttribute:t._offsetAttribute})};var EllipsoidOutlineGeometry_default=EllipsoidOutlineGeometry;export{EllipsoidOutlineGeometry_default};