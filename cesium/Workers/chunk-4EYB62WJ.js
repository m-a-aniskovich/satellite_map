/*! For license information please see chunk-4EYB62WJ.js.LICENSE.txt */
import{Cartesian4_default,Matrix4_default}from"./chunk-RSWBNJPT.js";import{Cartesian3_default}from"./chunk-PHQVHDVI.js";import{Math_default}from"./chunk-IZED7ODV.js";import{Check_default,DeveloperError_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";function Plane(e,a){if(Check_default.typeOf.object("normal",e),!Math_default.equalsEpsilon(Cartesian3_default.magnitude(e),1,Math_default.EPSILON6))throw new DeveloperError_default("normal must be normalized.");Check_default.typeOf.number("distance",a),this.normal=Cartesian3_default.clone(e),this.distance=a}Plane.fromPointNormal=function(e,a,t){if(Check_default.typeOf.object("point",e),Check_default.typeOf.object("normal",a),!Math_default.equalsEpsilon(Cartesian3_default.magnitude(a),1,Math_default.EPSILON6))throw new DeveloperError_default("normal must be normalized.");const n=-Cartesian3_default.dot(a,e);return defined_default(t)?(Cartesian3_default.clone(a,t.normal),t.distance=n,t):new Plane(a,n)};var scratchNormal=new Cartesian3_default;Plane.fromCartesian4=function(e,a){Check_default.typeOf.object("coefficients",e);const t=Cartesian3_default.fromCartesian4(e,scratchNormal),n=e.w;if(!Math_default.equalsEpsilon(Cartesian3_default.magnitude(t),1,Math_default.EPSILON6))throw new DeveloperError_default("normal must be normalized.");return defined_default(a)?(Cartesian3_default.clone(t,a.normal),a.distance=n,a):new Plane(t,n)},Plane.getPointDistance=function(e,a){return Check_default.typeOf.object("plane",e),Check_default.typeOf.object("point",a),Cartesian3_default.dot(e.normal,a)+e.distance};var scratchCartesian=new Cartesian3_default;Plane.projectPointOntoPlane=function(e,a,t){Check_default.typeOf.object("plane",e),Check_default.typeOf.object("point",a),defined_default(t)||(t=new Cartesian3_default);const n=Plane.getPointDistance(e,a),r=Cartesian3_default.multiplyByScalar(e.normal,n,scratchCartesian);return Cartesian3_default.subtract(a,r,t)};var scratchInverseTranspose=new Matrix4_default,scratchPlaneCartesian4=new Cartesian4_default,scratchTransformNormal=new Cartesian3_default;Plane.transform=function(e,a,t){Check_default.typeOf.object("plane",e),Check_default.typeOf.object("transform",a);const n=e.normal,r=e.distance,l=Matrix4_default.inverseTranspose(a,scratchInverseTranspose);let f=Cartesian4_default.fromElements(n.x,n.y,n.z,r,scratchPlaneCartesian4);f=Matrix4_default.multiplyByVector(l,f,f);const o=Cartesian3_default.fromCartesian4(f,scratchTransformNormal);return f=Cartesian4_default.divideByScalar(f,Cartesian3_default.magnitude(o),f),Plane.fromCartesian4(f,t)},Plane.clone=function(e,a){return Check_default.typeOf.object("plane",e),defined_default(a)?(Cartesian3_default.clone(e.normal,a.normal),a.distance=e.distance,a):new Plane(e.normal,e.distance)},Plane.equals=function(e,a){return Check_default.typeOf.object("left",e),Check_default.typeOf.object("right",a),e.distance===a.distance&&Cartesian3_default.equals(e.normal,a.normal)},Plane.ORIGIN_XY_PLANE=Object.freeze(new Plane(Cartesian3_default.UNIT_Z,0)),Plane.ORIGIN_YZ_PLANE=Object.freeze(new Plane(Cartesian3_default.UNIT_X,0)),Plane.ORIGIN_ZX_PLANE=Object.freeze(new Plane(Cartesian3_default.UNIT_Y,0));var Plane_default=Plane;export{Plane_default};