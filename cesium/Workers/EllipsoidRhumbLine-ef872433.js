define(["exports","./Matrix3-41c58dde","./Check-6ede7e26","./defaultValue-fe22d8c0","./Math-0a2ac845"],(function(t,i,e,a,n){"use strict";function s(t,i,e){if(0===t)return i*e;const a=t*t,n=a*a,s=n*a,h=s*a,u=h*a,d=u*a,o=e;return i*((1-a/4-3*n/64-5*s/256-175*h/16384-441*u/65536-4851*d/1048576)*o-(3*a/8+3*n/32+45*s/1024+105*h/4096+2205*u/131072+6237*d/524288)*Math.sin(2*o)+(15*n/256+45*s/1024+525*h/16384+1575*u/65536+155925*d/8388608)*Math.sin(4*o)-(35*s/3072+175*h/12288+3675*u/262144+13475*d/1048576)*Math.sin(6*o)+(315*h/131072+2205*u/524288+43659*d/8388608)*Math.sin(8*o)-(693*u/1310720+6237*d/5242880)*Math.sin(10*o)+1001*d/8388608*Math.sin(12*o))}function h(t,i){if(0===t)return Math.log(Math.tan(.5*(n.CesiumMath.PI_OVER_TWO+i)));const e=t*Math.sin(i);return Math.log(Math.tan(.5*(n.CesiumMath.PI_OVER_TWO+i)))-t/2*Math.log((1+e)/(1-e))}const u=new i.Cartesian3,d=new i.Cartesian3;function o(t,a,o,r){const c=i.Cartesian3.normalize(r.cartographicToCartesian(a,d),u),l=i.Cartesian3.normalize(r.cartographicToCartesian(o,d),d);e.Check.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(i.Cartesian3.angleBetween(c,l))-Math.PI),.0125);const M=r.maximumRadius,m=r.minimumRadius,_=M*M,g=m*m;t._ellipticitySquared=(_-g)/_,t._ellipticity=Math.sqrt(t._ellipticitySquared),t._start=i.Cartographic.clone(a,t._start),t._start.height=0,t._end=i.Cartographic.clone(o,t._end),t._end.height=0,t._heading=function(t,i,e,a,s){const u=h(t._ellipticity,e),d=h(t._ellipticity,s);return Math.atan2(n.CesiumMath.negativePiToPi(a-i),d-u)}(t,a.longitude,a.latitude,o.longitude,o.latitude),t._distance=function(t,i,e,a,h,u,d){const o=t._heading,r=u-a;let c=0;if(n.CesiumMath.equalsEpsilon(Math.abs(o),n.CesiumMath.PI_OVER_TWO,n.CesiumMath.EPSILON8))if(i===e)c=i*Math.cos(h)*n.CesiumMath.negativePiToPi(r);else{const e=Math.sin(h);c=i*Math.cos(h)*n.CesiumMath.negativePiToPi(r)/Math.sqrt(1-t._ellipticitySquared*e*e)}else{const e=s(t._ellipticity,i,h);c=(s(t._ellipticity,i,d)-e)/Math.cos(o)}return Math.abs(c)}(t,r.maximumRadius,r.minimumRadius,a.longitude,a.latitude,o.longitude,o.latitude)}function r(t,e,u,d,o,r){if(0===u)return i.Cartographic.clone(t,r);const c=o*o;let l,M,m;if(Math.abs(n.CesiumMath.PI_OVER_TWO-Math.abs(e))>n.CesiumMath.EPSILON8){M=function(t,i,e){const a=t/e;if(0===i)return a;const n=a*a,s=n*a,h=s*a,u=i*i,d=u*u,o=d*u,r=o*u,c=r*u,l=c*u,M=Math.sin(2*a),m=Math.cos(2*a),_=Math.sin(4*a),g=Math.cos(4*a),f=Math.sin(6*a),p=Math.cos(6*a),C=Math.sin(8*a),P=Math.cos(8*a),O=Math.sin(10*a);return a+a*u/4+7*a*d/64+15*a*o/256+579*a*r/16384+1515*a*c/65536+16837*a*l/1048576+(3*a*d/16+45*a*o/256-a*(32*n-561)*r/4096-a*(232*n-1677)*c/16384+a*(399985-90560*n+512*h)*l/5242880)*m+(21*a*o/256+483*a*r/4096-a*(224*n-1969)*c/16384-a*(33152*n-112599)*l/1048576)*g+(151*a*r/4096+4681*a*c/65536+1479*a*l/16384-453*s*l/32768)*p+(1097*a*c/65536+42783*a*l/1048576)*P+8011*a*l/1048576*Math.cos(10*a)+(3*u/8+3*d/16+213*o/2048-3*n*o/64+255*r/4096-33*n*r/512+20861*c/524288-33*n*c/512+h*c/1024+28273*l/1048576-471*n*l/8192+9*h*l/4096)*M+(21*d/256+21*o/256+533*r/8192-21*n*r/512+197*c/4096-315*n*c/4096+584039*l/16777216-12517*n*l/131072+7*h*l/2048)*_+(151*o/6144+151*r/4096+5019*c/131072-453*n*c/16384+26965*l/786432-8607*n*l/131072)*f+(1097*r/131072+1097*c/65536+225797*l/10485760-1097*n*l/65536)*C+(8011*c/2621440+8011*l/1048576)*O+293393*l/251658240*Math.sin(12*a)}(s(o,d,t.latitude)+u*Math.cos(e),o,d);const i=h(o,t.latitude),a=h(o,M);m=Math.tan(e)*(a-i),l=n.CesiumMath.negativePiToPi(t.longitude+m)}else{let i;if(M=t.latitude,0===o)i=d*Math.cos(t.latitude);else{const e=Math.sin(t.latitude);i=d*Math.cos(t.latitude)/Math.sqrt(1-c*e*e)}m=u/i,l=e>0?n.CesiumMath.negativePiToPi(t.longitude+m):n.CesiumMath.negativePiToPi(t.longitude-m)}return a.defined(r)?(r.longitude=l,r.latitude=M,r.height=0,r):new i.Cartographic(l,M,0)}function c(t,e,n){const s=a.defaultValue(n,i.Ellipsoid.WGS84);this._ellipsoid=s,this._start=new i.Cartographic,this._end=new i.Cartographic,this._heading=void 0,this._distance=void 0,this._ellipticity=void 0,this._ellipticitySquared=void 0,a.defined(t)&&a.defined(e)&&o(this,t,e,s)}Object.defineProperties(c.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return e.Check.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},heading:{get:function(){return e.Check.defined("distance",this._distance),this._heading}}}),c.fromStartHeadingDistance=function(t,s,h,u,d){e.Check.defined("start",t),e.Check.defined("heading",s),e.Check.defined("distance",h),e.Check.typeOf.number.greaterThan("distance",h,0);const o=a.defaultValue(u,i.Ellipsoid.WGS84),l=o.maximumRadius,M=o.minimumRadius,m=l*l,_=M*M,g=Math.sqrt((m-_)/m),f=r(t,s=n.CesiumMath.negativePiToPi(s),h,o.maximumRadius,g);return!a.defined(d)||a.defined(u)&&!u.equals(d.ellipsoid)?new c(t,f,o):(d.setEndPoints(t,f),d)},c.prototype.setEndPoints=function(t,i){e.Check.defined("start",t),e.Check.defined("end",i),o(this,t,i,this._ellipsoid)},c.prototype.interpolateUsingFraction=function(t,i){return this.interpolateUsingSurfaceDistance(t*this._distance,i)},c.prototype.interpolateUsingSurfaceDistance=function(t,i){if(e.Check.typeOf.number("distance",t),!a.defined(this._distance)||0===this._distance)throw new e.DeveloperError("EllipsoidRhumbLine must have distinct start and end set.");return r(this._start,this._heading,t,this._ellipsoid.maximumRadius,this._ellipticity,i)},c.prototype.findIntersectionWithLongitude=function(t,s){if(e.Check.typeOf.number("intersectionLongitude",t),!a.defined(this._distance)||0===this._distance)throw new e.DeveloperError("EllipsoidRhumbLine must have distinct start and end set.");const h=this._ellipticity,u=this._heading,d=Math.abs(u),o=this._start;if(t=n.CesiumMath.negativePiToPi(t),n.CesiumMath.equalsEpsilon(Math.abs(t),Math.PI,n.CesiumMath.EPSILON14)&&(t=n.CesiumMath.sign(o.longitude)*Math.PI),a.defined(s)||(s=new i.Cartographic),Math.abs(n.CesiumMath.PI_OVER_TWO-d)<=n.CesiumMath.EPSILON8)return s.longitude=t,s.latitude=o.latitude,s.height=0,s;if(n.CesiumMath.equalsEpsilon(Math.abs(n.CesiumMath.PI_OVER_TWO-d),n.CesiumMath.PI_OVER_TWO,n.CesiumMath.EPSILON8)){if(n.CesiumMath.equalsEpsilon(t,o.longitude,n.CesiumMath.EPSILON12))return;return s.longitude=t,s.latitude=n.CesiumMath.PI_OVER_TWO*n.CesiumMath.sign(n.CesiumMath.PI_OVER_TWO-u),s.height=0,s}const r=o.latitude,c=h*Math.sin(r),l=Math.tan(.5*(n.CesiumMath.PI_OVER_TWO+r))*Math.exp((t-o.longitude)/Math.tan(u)),M=(1+c)/(1-c);let m,_=o.latitude;do{m=_;const t=h*Math.sin(m),i=(1+t)/(1-t);_=2*Math.atan(l*Math.pow(i/M,h/2))-n.CesiumMath.PI_OVER_TWO}while(!n.CesiumMath.equalsEpsilon(_,m,n.CesiumMath.EPSILON12));return s.longitude=t,s.latitude=_,s.height=0,s},c.prototype.findIntersectionWithLatitude=function(t,s){if(e.Check.typeOf.number("intersectionLatitude",t),!a.defined(this._distance)||0===this._distance)throw new e.DeveloperError("EllipsoidRhumbLine must have distinct start and end set.");const u=this._ellipticity,d=this._heading,o=this._start;if(n.CesiumMath.equalsEpsilon(Math.abs(d),n.CesiumMath.PI_OVER_TWO,n.CesiumMath.EPSILON8))return;const r=h(u,o.latitude),c=h(u,t),l=Math.tan(d)*(c-r),M=n.CesiumMath.negativePiToPi(o.longitude+l);return a.defined(s)?(s.longitude=M,s.latitude=t,s.height=0,s):new i.Cartographic(M,t,0)},t.EllipsoidRhumbLine=c}));