/*! For license information please see createWallOutlineGeometry.js.LICENSE.txt */
import{WallGeometryLibrary_default}from"./chunk-CHDJ66UM.js";import"./chunk-3FCUUN6M.js";import"./chunk-LSGUCCKJ.js";import"./chunk-DTNN3ODA.js";import"./chunk-6PWSSCRA.js";import"./chunk-HEROVJML.js";import"./chunk-4EYB62WJ.js";import{IndexDatatype_default}from"./chunk-J3U6Z5YQ.js";import{GeometryAttributes_default}from"./chunk-SJDXMQSP.js";import{GeometryAttribute_default,Geometry_default,PrimitiveType_default}from"./chunk-OTBRPBCC.js";import{BoundingSphere_default}from"./chunk-D4YHO4NZ.js";import"./chunk-HSW63JN4.js";import"./chunk-RSWBNJPT.js";import{ComponentDatatype_default}from"./chunk-Z6LPXA7S.js";import{Cartesian3_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import{Math_default}from"./chunk-IZED7ODV.js";import"./chunk-VNRUVNIK.js";import"./chunk-66CXKODF.js";import{defaultValue_default}from"./chunk-C53JYYKX.js";import{DeveloperError_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";var scratchCartesian3Position1=new Cartesian3_default,scratchCartesian3Position2=new Cartesian3_default;function WallOutlineGeometry(e){const t=(e=defaultValue_default(e,defaultValue_default.EMPTY_OBJECT)).positions,i=e.maximumHeights,a=e.minimumHeights;if(!defined_default(t))throw new DeveloperError_default("options.positions is required.");if(defined_default(i)&&i.length!==t.length)throw new DeveloperError_default("options.positions and options.maximumHeights must have the same length.");if(defined_default(a)&&a.length!==t.length)throw new DeveloperError_default("options.positions and options.minimumHeights must have the same length.");const l=defaultValue_default(e.granularity,Math_default.RADIANS_PER_DEGREE),o=defaultValue_default(e.ellipsoid,Ellipsoid_default.WGS84);this._positions=t,this._minimumHeights=a,this._maximumHeights=i,this._granularity=l,this._ellipsoid=Ellipsoid_default.clone(o),this._workerName="createWallOutlineGeometry";let r=1+t.length*Cartesian3_default.packedLength+2;defined_default(a)&&(r+=a.length),defined_default(i)&&(r+=i.length),this.packedLength=r+Ellipsoid_default.packedLength+1}WallOutlineGeometry.pack=function(e,t,i){if(!defined_default(e))throw new DeveloperError_default("value is required");if(!defined_default(t))throw new DeveloperError_default("array is required");let a;i=defaultValue_default(i,0);const l=e._positions;let o=l.length;for(t[i++]=o,a=0;a<o;++a,i+=Cartesian3_default.packedLength)Cartesian3_default.pack(l[a],t,i);const r=e._minimumHeights;if(o=defined_default(r)?r.length:0,t[i++]=o,defined_default(r))for(a=0;a<o;++a)t[i++]=r[a];const n=e._maximumHeights;if(o=defined_default(n)?n.length:0,t[i++]=o,defined_default(n))for(a=0;a<o;++a)t[i++]=n[a];return Ellipsoid_default.pack(e._ellipsoid,t,i),t[i+=Ellipsoid_default.packedLength]=e._granularity,t};var scratchEllipsoid=Ellipsoid_default.clone(Ellipsoid_default.UNIT_SPHERE),scratchOptions={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:scratchEllipsoid,granularity:void 0};WallOutlineGeometry.unpack=function(e,t,i){if(!defined_default(e))throw new DeveloperError_default("array is required");let a;t=defaultValue_default(t,0);let l=e[t++];const o=new Array(l);for(a=0;a<l;++a,t+=Cartesian3_default.packedLength)o[a]=Cartesian3_default.unpack(e,t);let r,n;if(l=e[t++],l>0)for(r=new Array(l),a=0;a<l;++a)r[a]=e[t++];if(l=e[t++],l>0)for(n=new Array(l),a=0;a<l;++a)n[a]=e[t++];const u=Ellipsoid_default.unpack(e,t,scratchEllipsoid),s=e[t+=Ellipsoid_default.packedLength];return defined_default(i)?(i._positions=o,i._minimumHeights=r,i._maximumHeights=n,i._ellipsoid=Ellipsoid_default.clone(u,i._ellipsoid),i._granularity=s,i):(scratchOptions.positions=o,scratchOptions.minimumHeights=r,scratchOptions.maximumHeights=n,scratchOptions.granularity=s,new WallOutlineGeometry(scratchOptions))},WallOutlineGeometry.fromConstantHeights=function(e){const t=(e=defaultValue_default(e,defaultValue_default.EMPTY_OBJECT)).positions;if(!defined_default(t))throw new DeveloperError_default("options.positions is required.");let i,a;const l=e.minimumHeight,o=e.maximumHeight,r=defined_default(l),n=defined_default(o);if(r||n){const e=t.length;i=r?new Array(e):void 0,a=n?new Array(e):void 0;for(let t=0;t<e;++t)r&&(i[t]=l),n&&(a[t]=o)}return new WallOutlineGeometry({positions:t,maximumHeights:a,minimumHeights:i,ellipsoid:e.ellipsoid})},WallOutlineGeometry.createGeometry=function(e){const t=e._positions,i=e._minimumHeights,a=e._maximumHeights,l=e._granularity,o=e._ellipsoid,r=WallGeometryLibrary_default.computePositions(o,t,a,i,l,!1);if(!defined_default(r))return;const n=r.bottomPositions,u=r.topPositions;let s=u.length,d=2*s;const f=new Float64Array(d);let m,p=0;for(s/=3,m=0;m<s;++m){const e=3*m,t=Cartesian3_default.fromArray(u,e,scratchCartesian3Position1),i=Cartesian3_default.fromArray(n,e,scratchCartesian3Position2);f[p++]=i.x,f[p++]=i.y,f[p++]=i.z,f[p++]=t.x,f[p++]=t.y,f[p++]=t.z}const _=new GeometryAttributes_default({position:new GeometryAttribute_default({componentDatatype:ComponentDatatype_default.DOUBLE,componentsPerAttribute:3,values:f})}),c=d/3;d=2*c-4+c;const h=IndexDatatype_default.createTypedArray(c,d);let y=0;for(m=0;m<c-2;m+=2){const e=m,t=m+2,i=Cartesian3_default.fromArray(f,3*e,scratchCartesian3Position1),a=Cartesian3_default.fromArray(f,3*t,scratchCartesian3Position2);if(Cartesian3_default.equalsEpsilon(i,a,Math_default.EPSILON10))continue;const l=m+1,o=m+3;h[y++]=l,h[y++]=e,h[y++]=l,h[y++]=o,h[y++]=e,h[y++]=t}return h[y++]=c-2,h[y++]=c-1,new Geometry_default({attributes:_,indices:h,primitiveType:PrimitiveType_default.LINES,boundingSphere:new BoundingSphere_default.fromVertices(f)})};var WallOutlineGeometry_default=WallOutlineGeometry;function createWallOutlineGeometry(e,t){return defined_default(t)&&(e=WallOutlineGeometry_default.unpack(e,t)),e._ellipsoid=Ellipsoid_default.clone(e._ellipsoid),WallOutlineGeometry_default.createGeometry(e)}var createWallOutlineGeometry_default=createWallOutlineGeometry;export{createWallOutlineGeometry_default as default};