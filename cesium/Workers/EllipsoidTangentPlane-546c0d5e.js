define(["exports","./AxisAlignedBoundingBox-4bfd84f3","./Matrix2-e1298525","./Matrix3-41c58dde","./Check-6ede7e26","./defaultValue-fe22d8c0","./IntersectionTests-85350792","./Plane-4c3d403b","./Transforms-e2d4a55a"],(function(e,t,n,i,o,r,s,a,c){"use strict";const d=new n.Cartesian4;function l(e,t){if(o.Check.defined("origin",e),e=(t=r.defaultValue(t,i.Ellipsoid.WGS84)).scaleToGeodeticSurface(e),!r.defined(e))throw new o.DeveloperError("origin must not be at the center of the ellipsoid.");const s=c.Transforms.eastNorthUpToFixedFrame(e,t);this._ellipsoid=t,this._origin=e,this._xAxis=i.Cartesian3.fromCartesian4(n.Matrix4.getColumn(s,0,d)),this._yAxis=i.Cartesian3.fromCartesian4(n.Matrix4.getColumn(s,1,d));const l=i.Cartesian3.fromCartesian4(n.Matrix4.getColumn(s,2,d));this._plane=a.Plane.fromPointNormal(e,l)}Object.defineProperties(l.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},origin:{get:function(){return this._origin}},plane:{get:function(){return this._plane}},xAxis:{get:function(){return this._xAxis}},yAxis:{get:function(){return this._yAxis}},zAxis:{get:function(){return this._plane.normal}}});const f=new t.AxisAlignedBoundingBox;l.fromPoints=function(e,n){return o.Check.defined("cartesians",e),new l(t.AxisAlignedBoundingBox.fromPoints(e,f).center,n)};const h=new s.Ray,p=new i.Cartesian3;l.prototype.projectPointOntoPlane=function(e,t){o.Check.defined("cartesian",e);const a=h;a.origin=e,i.Cartesian3.normalize(e,a.direction);let c=s.IntersectionTests.rayPlane(a,this._plane,p);if(r.defined(c)||(i.Cartesian3.negate(a.direction,a.direction),c=s.IntersectionTests.rayPlane(a,this._plane,p)),r.defined(c)){const e=i.Cartesian3.subtract(c,this._origin,c),o=i.Cartesian3.dot(this._xAxis,e),s=i.Cartesian3.dot(this._yAxis,e);return r.defined(t)?(t.x=o,t.y=s,t):new n.Cartesian2(o,s)}},l.prototype.projectPointsOntoPlane=function(e,t){o.Check.defined("cartesians",e),r.defined(t)||(t=[]);let n=0;const i=e.length;for(let o=0;o<i;o++){const i=this.projectPointOntoPlane(e[o],t[n]);r.defined(i)&&(t[n]=i,n++)}return t.length=n,t},l.prototype.projectPointToNearestOnPlane=function(e,t){o.Check.defined("cartesian",e),r.defined(t)||(t=new n.Cartesian2);const a=h;a.origin=e,i.Cartesian3.clone(this._plane.normal,a.direction);let c=s.IntersectionTests.rayPlane(a,this._plane,p);r.defined(c)||(i.Cartesian3.negate(a.direction,a.direction),c=s.IntersectionTests.rayPlane(a,this._plane,p));const d=i.Cartesian3.subtract(c,this._origin,c),l=i.Cartesian3.dot(this._xAxis,d),f=i.Cartesian3.dot(this._yAxis,d);return t.x=l,t.y=f,t},l.prototype.projectPointsToNearestOnPlane=function(e,t){o.Check.defined("cartesians",e),r.defined(t)||(t=[]);const n=e.length;t.length=n;for(let i=0;i<n;i++)t[i]=this.projectPointToNearestOnPlane(e[i],t[i]);return t};const u=new i.Cartesian3;l.prototype.projectPointOntoEllipsoid=function(e,t){o.Check.defined("cartesian",e),r.defined(t)||(t=new i.Cartesian3);const n=this._ellipsoid,s=this._origin,a=this._xAxis,c=this._yAxis,d=u;return i.Cartesian3.multiplyByScalar(a,e.x,d),t=i.Cartesian3.add(s,d,t),i.Cartesian3.multiplyByScalar(c,e.y,d),i.Cartesian3.add(t,d,t),n.scaleToGeocentricSurface(t,t),t},l.prototype.projectPointsOntoEllipsoid=function(e,t){o.Check.defined("cartesians",e);const n=e.length;r.defined(t)?t.length=n:t=new Array(n);for(let i=0;i<n;++i)t[i]=this.projectPointOntoEllipsoid(e[i],t[i]);return t},e.EllipsoidTangentPlane=l}));