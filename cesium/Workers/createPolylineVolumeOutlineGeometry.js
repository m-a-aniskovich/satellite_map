define(["./defaultValue-fe22d8c0","./Matrix3-41c58dde","./arrayRemoveDuplicates-d2061e85","./BoundingRectangle-5fd6403a","./Transforms-e2d4a55a","./Matrix2-e1298525","./ComponentDatatype-cf1fa08e","./PolylineVolumeGeometryLibrary-d25f0050","./Check-6ede7e26","./GeometryAttribute-13da9466","./GeometryAttributes-ad136444","./IndexDatatype-2643aa47","./Math-0a2ac845","./PolygonPipeline-460cce4e","./combine-d9581036","./RuntimeError-ef395448","./WebGLConstants-0b1ce7ba","./EllipsoidTangentPlane-546c0d5e","./AxisAlignedBoundingBox-4bfd84f3","./IntersectionTests-85350792","./Plane-4c3d403b","./PolylinePipeline-7119eb3f","./EllipsoidGeodesic-5b3623dc","./EllipsoidRhumbLine-ef872433"],(function(e,i,t,n,o,r,a,l,s,p,d,c,u,y,f,h,g,m,E,P,_,k,C,D){"use strict";function b(t){const n=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).polylinePositions,o=t.shapePositions;if(!e.defined(n))throw new s.DeveloperError("options.polylinePositions is required.");if(!e.defined(o))throw new s.DeveloperError("options.shapePositions is required.");this._positions=n,this._shape=o,this._ellipsoid=i.Ellipsoid.clone(e.defaultValue(t.ellipsoid,i.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(t.cornerType,l.CornerType.ROUNDED),this._granularity=e.defaultValue(t.granularity,u.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry";let a=1+n.length*i.Cartesian3.packedLength;a+=1+o.length*r.Cartesian2.packedLength,this.packedLength=a+i.Ellipsoid.packedLength+2}b.pack=function(t,n,o){if(!e.defined(t))throw new s.DeveloperError("value is required");if(!e.defined(n))throw new s.DeveloperError("array is required");let a;o=e.defaultValue(o,0);const l=t._positions;let p=l.length;for(n[o++]=p,a=0;a<p;++a,o+=i.Cartesian3.packedLength)i.Cartesian3.pack(l[a],n,o);const d=t._shape;for(p=d.length,n[o++]=p,a=0;a<p;++a,o+=r.Cartesian2.packedLength)r.Cartesian2.pack(d[a],n,o);return i.Ellipsoid.pack(t._ellipsoid,n,o),o+=i.Ellipsoid.packedLength,n[o++]=t._cornerType,n[o]=t._granularity,n};const v=i.Ellipsoid.clone(i.Ellipsoid.UNIT_SPHERE),w={polylinePositions:void 0,shapePositions:void 0,ellipsoid:v,height:void 0,cornerType:void 0,granularity:void 0};b.unpack=function(t,n,o){if(!e.defined(t))throw new s.DeveloperError("array is required");let a;n=e.defaultValue(n,0);let l=t[n++];const p=new Array(l);for(a=0;a<l;++a,n+=i.Cartesian3.packedLength)p[a]=i.Cartesian3.unpack(t,n);l=t[n++];const d=new Array(l);for(a=0;a<l;++a,n+=r.Cartesian2.packedLength)d[a]=r.Cartesian2.unpack(t,n);const c=i.Ellipsoid.unpack(t,n,v);n+=i.Ellipsoid.packedLength;const u=t[n++],y=t[n];return e.defined(o)?(o._positions=p,o._shape=d,o._ellipsoid=i.Ellipsoid.clone(c,o._ellipsoid),o._cornerType=u,o._granularity=y,o):(w.polylinePositions=p,w.shapePositions=d,w.cornerType=u,w.granularity=y,new b(w))};const L=new n.BoundingRectangle;return b.createGeometry=function(e){const r=e._positions,s=t.arrayRemoveDuplicates(r,i.Cartesian3.equalsEpsilon);let u=e._shape;if(u=l.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(u),s.length<2||u.length<3)return;y.PolygonPipeline.computeWindingOrder2D(u)===y.WindingOrder.CLOCKWISE&&u.reverse();const f=n.BoundingRectangle.fromPoints(u,L);return function(e,i){const t=new d.GeometryAttributes;t.position=new p.GeometryAttribute({componentDatatype:a.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e});const n=i.length,r=t.position.values.length/3,l=e.length/3/n,s=c.IndexDatatype.createTypedArray(r,2*n*(l+1));let u,y,f=0;u=0;let h=u*n;for(y=0;y<n-1;y++)s[f++]=y+h,s[f++]=y+h+1;for(s[f++]=n-1+h,s[f++]=h,u=l-1,h=u*n,y=0;y<n-1;y++)s[f++]=y+h,s[f++]=y+h+1;for(s[f++]=n-1+h,s[f++]=h,u=0;u<l-1;u++){const e=n*u,i=e+n;for(y=0;y<n;y++)s[f++]=y+e,s[f++]=y+i}return new p.Geometry({attributes:t,indices:c.IndexDatatype.createTypedArray(r,s),boundingSphere:o.BoundingSphere.fromVertices(e),primitiveType:p.PrimitiveType.LINES})}(l.PolylineVolumeGeometryLibrary.computePositions(s,u,f,e,!1),u)},function(t,n){return e.defined(n)&&(t=b.unpack(t,n)),t._ellipsoid=i.Ellipsoid.clone(t._ellipsoid),b.createGeometry(t)}}));