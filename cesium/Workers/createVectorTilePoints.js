/*! For license information please see createVectorTilePoints.js.LICENSE.txt */
import{createTaskProcessorWorker_default}from"./chunk-AI3KSNM6.js";import{AttributeCompression_default}from"./chunk-I6TVJ6T7.js";import{Rectangle_default}from"./chunk-RSWBNJPT.js";import"./chunk-Z6LPXA7S.js";import{Cartesian3_default,Cartographic_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import{Math_default}from"./chunk-IZED7ODV.js";import"./chunk-VNRUVNIK.js";import"./chunk-66CXKODF.js";import"./chunk-C53JYYKX.js";import"./chunk-7FEGZO3D.js";import"./chunk-YS4KPNLC.js";var maxShort=32767,scratchBVCartographic=new Cartographic_default,scratchEncodedPosition=new Cartesian3_default,scratchRectangle=new Rectangle_default,scratchEllipsoid=new Ellipsoid_default,scratchMinMaxHeights={min:void 0,max:void 0};function unpackBuffer(t){t=new Float64Array(t);let a=0;scratchMinMaxHeights.min=t[a++],scratchMinMaxHeights.max=t[a++],Rectangle_default.unpack(t,a,scratchRectangle),a+=Rectangle_default.packedLength,Ellipsoid_default.unpack(t,a,scratchEllipsoid)}function createVectorTilePoints(t,a){const e=new Uint16Array(t.positions);unpackBuffer(t.packedBuffer);const r=scratchRectangle,c=scratchEllipsoid,o=scratchMinMaxHeights.min,s=scratchMinMaxHeights.max,i=e.length/3,n=e.subarray(0,i),l=e.subarray(i,2*i),u=e.subarray(2*i,3*i);AttributeCompression_default.zigZagDeltaDecode(n,l,u);const h=new Float64Array(e.length);for(let t=0;t<i;++t){const a=n[t],e=l[t],i=u[t],f=Math_default.lerp(r.west,r.east,a/maxShort),d=Math_default.lerp(r.south,r.north,e/maxShort),p=Math_default.lerp(o,s,i/maxShort),m=Cartographic_default.fromRadians(f,d,p,scratchBVCartographic),g=c.cartographicToCartesian(m,scratchEncodedPosition);Cartesian3_default.pack(g,h,3*t)}return a.push(h.buffer),{positions:h.buffer}}var createVectorTilePoints_default=createTaskProcessorWorker_default(createVectorTilePoints);export{createVectorTilePoints_default as default};