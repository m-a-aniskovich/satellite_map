define(["./AttributeCompression-f9f6c717","./Matrix3-41c58dde","./Math-0a2ac845","./Matrix2-e1298525","./createTaskProcessorWorker","./ComponentDatatype-cf1fa08e","./defaultValue-fe22d8c0","./Check-6ede7e26","./WebGLConstants-0b1ce7ba","./RuntimeError-ef395448"],(function(e,a,t,r,n,o,i,s,c,u){"use strict";const p=32767,f=new a.Cartographic,l=new a.Cartesian3,d=new r.Rectangle,h=new a.Ellipsoid,m={min:void 0,max:void 0};return n((function(n,o){const i=new Uint16Array(n.positions);!function(e){e=new Float64Array(e);let t=0;m.min=e[t++],m.max=e[t++],r.Rectangle.unpack(e,t,d),t+=r.Rectangle.packedLength,a.Ellipsoid.unpack(e,t,h)}(n.packedBuffer);const s=d,c=h,u=m.min,C=m.max,g=i.length/3,b=i.subarray(0,g),k=i.subarray(g,2*g),w=i.subarray(2*g,3*g);e.AttributeCompression.zigZagDeltaDecode(b,k,w);const y=new Float64Array(i.length);for(let e=0;e<g;++e){const r=b[e],n=k[e],o=w[e],i=t.CesiumMath.lerp(s.west,s.east,r/p),d=t.CesiumMath.lerp(s.south,s.north,n/p),h=t.CesiumMath.lerp(u,C,o/p),m=a.Cartographic.fromRadians(i,d,h,f),g=c.cartographicToCartesian(m,l);a.Cartesian3.pack(g,y,3*e)}return o.push(y.buffer),{positions:y.buffer}}))}));