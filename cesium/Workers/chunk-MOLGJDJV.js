/*! For license information please see chunk-MOLGJDJV.js.LICENSE.txt */
import{AxisAlignedBoundingBox_default}from"./chunk-FGUP2QEP.js";import{IntersectionTests_default,Ray_default}from"./chunk-HEROVJML.js";import{Plane_default}from"./chunk-4EYB62WJ.js";import{Transforms_default}from"./chunk-D4YHO4NZ.js";import{Cartesian2_default,Cartesian4_default,Matrix4_default}from"./chunk-RSWBNJPT.js";import{Cartesian3_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import{defaultValue_default}from"./chunk-C53JYYKX.js";import{Check_default,DeveloperError_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";var scratchCart4=new Cartesian4_default;function EllipsoidTangentPlane(t,e){if(Check_default.defined("origin",t),t=(e=defaultValue_default(e,Ellipsoid_default.WGS84)).scaleToGeodeticSurface(t),!defined_default(t))throw new DeveloperError_default("origin must not be at the center of the ellipsoid.");const n=Transforms_default.eastNorthUpToFixedFrame(t,e);this._ellipsoid=e,this._origin=t,this._xAxis=Cartesian3_default.fromCartesian4(Matrix4_default.getColumn(n,0,scratchCart4)),this._yAxis=Cartesian3_default.fromCartesian4(Matrix4_default.getColumn(n,1,scratchCart4));const a=Cartesian3_default.fromCartesian4(Matrix4_default.getColumn(n,2,scratchCart4));this._plane=Plane_default.fromPointNormal(t,a)}Object.defineProperties(EllipsoidTangentPlane.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},origin:{get:function(){return this._origin}},plane:{get:function(){return this._plane}},xAxis:{get:function(){return this._xAxis}},yAxis:{get:function(){return this._yAxis}},zAxis:{get:function(){return this._plane.normal}}});var tmp=new AxisAlignedBoundingBox_default;EllipsoidTangentPlane.fromPoints=function(t,e){return Check_default.defined("cartesians",t),new EllipsoidTangentPlane(AxisAlignedBoundingBox_default.fromPoints(t,tmp).center,e)};var scratchProjectPointOntoPlaneRay=new Ray_default,scratchProjectPointOntoPlaneCartesian3=new Cartesian3_default;EllipsoidTangentPlane.prototype.projectPointOntoPlane=function(t,e){Check_default.defined("cartesian",t);const n=scratchProjectPointOntoPlaneRay;n.origin=t,Cartesian3_default.normalize(t,n.direction);let a=IntersectionTests_default.rayPlane(n,this._plane,scratchProjectPointOntoPlaneCartesian3);if(defined_default(a)||(Cartesian3_default.negate(n.direction,n.direction),a=IntersectionTests_default.rayPlane(n,this._plane,scratchProjectPointOntoPlaneCartesian3)),defined_default(a)){const t=Cartesian3_default.subtract(a,this._origin,a),n=Cartesian3_default.dot(this._xAxis,t),i=Cartesian3_default.dot(this._yAxis,t);return defined_default(e)?(e.x=n,e.y=i,e):new Cartesian2_default(n,i)}},EllipsoidTangentPlane.prototype.projectPointsOntoPlane=function(t,e){Check_default.defined("cartesians",t),defined_default(e)||(e=[]);let n=0;const a=t.length;for(let i=0;i<a;i++){const a=this.projectPointOntoPlane(t[i],e[n]);defined_default(a)&&(e[n]=a,n++)}return e.length=n,e},EllipsoidTangentPlane.prototype.projectPointToNearestOnPlane=function(t,e){Check_default.defined("cartesian",t),defined_default(e)||(e=new Cartesian2_default);const n=scratchProjectPointOntoPlaneRay;n.origin=t,Cartesian3_default.clone(this._plane.normal,n.direction);let a=IntersectionTests_default.rayPlane(n,this._plane,scratchProjectPointOntoPlaneCartesian3);defined_default(a)||(Cartesian3_default.negate(n.direction,n.direction),a=IntersectionTests_default.rayPlane(n,this._plane,scratchProjectPointOntoPlaneCartesian3));const i=Cartesian3_default.subtract(a,this._origin,a),r=Cartesian3_default.dot(this._xAxis,i),o=Cartesian3_default.dot(this._yAxis,i);return e.x=r,e.y=o,e},EllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane=function(t,e){Check_default.defined("cartesians",t),defined_default(e)||(e=[]);const n=t.length;e.length=n;for(let a=0;a<n;a++)e[a]=this.projectPointToNearestOnPlane(t[a],e[a]);return e};var projectPointsOntoEllipsoidScratch=new Cartesian3_default;EllipsoidTangentPlane.prototype.projectPointOntoEllipsoid=function(t,e){Check_default.defined("cartesian",t),defined_default(e)||(e=new Cartesian3_default);const n=this._ellipsoid,a=this._origin,i=this._xAxis,r=this._yAxis,o=projectPointsOntoEllipsoidScratch;return Cartesian3_default.multiplyByScalar(i,t.x,o),e=Cartesian3_default.add(a,o,e),Cartesian3_default.multiplyByScalar(r,t.y,o),Cartesian3_default.add(e,o,e),n.scaleToGeocentricSurface(e,e),e},EllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid=function(t,e){Check_default.defined("cartesians",t);const n=t.length;defined_default(e)?e.length=n:e=new Array(n);for(let a=0;a<n;++a)e[a]=this.projectPointOntoEllipsoid(t[a],e[a]);return e};var EllipsoidTangentPlane_default=EllipsoidTangentPlane;export{EllipsoidTangentPlane_default};