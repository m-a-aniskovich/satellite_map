/*! For license information please see createCoplanarPolygonOutlineGeometry.js.LICENSE.txt */
import{CoplanarPolygonGeometryLibrary_default}from"./chunk-364TQORK.js";import"./chunk-QY2WY5XJ.js";import{PolygonGeometryLibrary_default}from"./chunk-VODWDCX6.js";import"./chunk-235MRXLH.js";import{GeometryInstance_default}from"./chunk-GTEXWEAP.js";import{GeometryPipeline_default}from"./chunk-36ESDRIZ.js";import"./chunk-I6TVJ6T7.js";import"./chunk-VOAZN4IP.js";import"./chunk-MOLGJDJV.js";import"./chunk-FGUP2QEP.js";import"./chunk-ZVUAJKAL.js";import{arrayRemoveDuplicates_default}from"./chunk-DTNN3ODA.js";import"./chunk-6PWSSCRA.js";import"./chunk-HEROVJML.js";import"./chunk-4EYB62WJ.js";import{IndexDatatype_default}from"./chunk-J3U6Z5YQ.js";import{GeometryAttributes_default}from"./chunk-SJDXMQSP.js";import{GeometryAttribute_default,Geometry_default,PrimitiveType_default}from"./chunk-OTBRPBCC.js";import{BoundingSphere_default}from"./chunk-D4YHO4NZ.js";import"./chunk-HSW63JN4.js";import"./chunk-RSWBNJPT.js";import{ComponentDatatype_default}from"./chunk-Z6LPXA7S.js";import{Cartesian3_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import"./chunk-IZED7ODV.js";import"./chunk-VNRUVNIK.js";import"./chunk-66CXKODF.js";import{defaultValue_default}from"./chunk-C53JYYKX.js";import{Check_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";function createGeometryFromPositions(e){const t=e.length,o=new Float64Array(3*t),r=IndexDatatype_default.createTypedArray(t,2*t);let n=0,a=0;for(let l=0;l<t;l++){const i=e[l];o[n++]=i.x,o[n++]=i.y,o[n++]=i.z,r[a++]=l,r[a++]=(l+1)%t}const l=new GeometryAttributes_default({position:new GeometryAttribute_default({componentDatatype:ComponentDatatype_default.DOUBLE,componentsPerAttribute:3,values:o})});return new Geometry_default({attributes:l,indices:r,primitiveType:PrimitiveType_default.LINES})}function CoplanarPolygonOutlineGeometry(e){const t=(e=defaultValue_default(e,defaultValue_default.EMPTY_OBJECT)).polygonHierarchy;Check_default.defined("options.polygonHierarchy",t),this._polygonHierarchy=t,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=PolygonGeometryLibrary_default.computeHierarchyPackedLength(t,Cartesian3_default)+1}CoplanarPolygonOutlineGeometry.fromPositions=function(e){return e=defaultValue_default(e,defaultValue_default.EMPTY_OBJECT),Check_default.defined("options.positions",e.positions),new CoplanarPolygonOutlineGeometry({polygonHierarchy:{positions:e.positions}})},CoplanarPolygonOutlineGeometry.pack=function(e,t,o){return Check_default.typeOf.object("value",e),Check_default.defined("array",t),o=defaultValue_default(o,0),t[o=PolygonGeometryLibrary_default.packPolygonHierarchy(e._polygonHierarchy,t,o,Cartesian3_default)]=e.packedLength,t};var scratchOptions={polygonHierarchy:{}};CoplanarPolygonOutlineGeometry.unpack=function(e,t,o){Check_default.defined("array",e),t=defaultValue_default(t,0);const r=PolygonGeometryLibrary_default.unpackPolygonHierarchy(e,t,Cartesian3_default);t=r.startingIndex,delete r.startingIndex;const n=e[t];return defined_default(o)||(o=new CoplanarPolygonOutlineGeometry(scratchOptions)),o._polygonHierarchy=r,o.packedLength=n,o},CoplanarPolygonOutlineGeometry.createGeometry=function(e){const t=e._polygonHierarchy;let o=t.positions;if(o=arrayRemoveDuplicates_default(o,Cartesian3_default.equalsEpsilon,!0),o.length<3)return;if(!CoplanarPolygonGeometryLibrary_default.validOutline(o))return;const r=PolygonGeometryLibrary_default.polygonOutlinesFromHierarchy(t,!1);if(0===r.length)return;const n=[];for(let e=0;e<r.length;e++){const t=new GeometryInstance_default({geometry:createGeometryFromPositions(r[e])});n.push(t)}const a=GeometryPipeline_default.combineInstances(n)[0],l=BoundingSphere_default.fromPoints(t.positions);return new Geometry_default({attributes:a.attributes,indices:a.indices,primitiveType:a.primitiveType,boundingSphere:l})};var CoplanarPolygonOutlineGeometry_default=CoplanarPolygonOutlineGeometry;function createCoplanarPolygonOutlineGeometry(e,t){return defined_default(t)&&(e=CoplanarPolygonOutlineGeometry_default.unpack(e,t)),e._ellipsoid=Ellipsoid_default.clone(e._ellipsoid),CoplanarPolygonOutlineGeometry_default.createGeometry(e)}var createCoplanarPolygonOutlineGeometry_default=createCoplanarPolygonOutlineGeometry;export{createCoplanarPolygonOutlineGeometry_default as default};