/*! For license information please see chunk-LSGUCCKJ.js.LICENSE.txt */
import{Cartesian3_default,Cartographic_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import{Math_default}from"./chunk-IZED7ODV.js";import{defaultValue_default}from"./chunk-C53JYYKX.js";import{Check_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";function setConstants(t){const a=t._uSquared,e=t._ellipsoid.maximumRadius,i=t._ellipsoid.minimumRadius,n=(e-i)/e,s=Math.cos(t._startHeading),d=Math.sin(t._startHeading),o=(1-n)*Math.tan(t._start.latitude),r=1/Math.sqrt(1+o*o),c=r*o,u=Math.atan2(o,s),h=r*d,l=h*h,_=1-l,f=Math.sqrt(_),p=a/4,M=p*p,g=M*p,m=M*M,C=1+p-3*M/4+5*g/4-175*m/64,v=1-p+15*M/8-35*g/8,H=1-3*p+35*M/4,E=1-5*p,O=C*u-v*Math.sin(2*u)*p/2-H*Math.sin(4*u)*M/16-E*Math.sin(6*u)*g/48-5*Math.sin(8*u)*m/512,k=t._constants;k.a=e,k.b=i,k.f=n,k.cosineHeading=s,k.sineHeading=d,k.tanU=o,k.cosineU=r,k.sineU=c,k.sigma=u,k.sineAlpha=h,k.sineSquaredAlpha=l,k.cosineSquaredAlpha=_,k.cosineAlpha=f,k.u2Over4=p,k.u4Over16=M,k.u6Over64=g,k.u8Over256=m,k.a0=C,k.a1=v,k.a2=H,k.a3=E,k.distanceRatio=O}function computeC(t,a){return t*a*(4+t*(4-3*a))/16}function computeDeltaLambda(t,a,e,i,n,s,d){const o=computeC(t,e);return(1-o)*t*a*(i+o*n*(d+o*s*(2*d*d-1)))}function vincentyInverseFormula(t,a,e,i,n,s,d){const o=(a-e)/a,r=s-i,c=Math.atan((1-o)*Math.tan(n)),u=Math.atan((1-o)*Math.tan(d)),h=Math.cos(c),l=Math.sin(c),_=Math.cos(u),f=Math.sin(u),p=h*_,M=h*f,g=l*f,m=l*_;let C,v,H,E,O,k=r,b=Math_default.TWO_PI,S=Math.cos(k),q=Math.sin(k);do{S=Math.cos(k),q=Math.sin(k);const t=M-m*S;let a;H=Math.sqrt(_*_*q*q+t*t),v=g+p*S,C=Math.atan2(H,v),0===H?(a=0,E=1):(a=p*q/H,E=1-a*a),b=k,O=v-2*g/E,isFinite(O)||(O=0),k=r+computeDeltaLambda(o,a,E,C,H,v,O)}while(Math.abs(k-b)>Math_default.EPSILON12);const D=E*(a*a-e*e)/(e*e),G=D*(256+D*(D*(74-47*D)-128))/1024,P=O*O,U=e*(1+D*(4096+D*(D*(320-175*D)-768))/16384)*(C-G*H*(O+G*(v*(2*P-1)-G*O*(4*H*H-3)*(4*P-3)/6)/4)),w=Math.atan2(_*q,M-m*S),y=Math.atan2(h*q,M*S-m);t._distance=U,t._startHeading=w,t._endHeading=y,t._uSquared=D}var scratchCart1=new Cartesian3_default,scratchCart2=new Cartesian3_default;function computeProperties(t,a,e,i){const n=Cartesian3_default.normalize(i.cartographicToCartesian(a,scratchCart2),scratchCart1),s=Cartesian3_default.normalize(i.cartographicToCartesian(e,scratchCart2),scratchCart2);Check_default.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(Cartesian3_default.angleBetween(n,s))-Math.PI),.0125),vincentyInverseFormula(t,i.maximumRadius,i.minimumRadius,a.longitude,a.latitude,e.longitude,e.latitude),t._start=Cartographic_default.clone(a,t._start),t._end=Cartographic_default.clone(e,t._end),t._start.height=0,t._end.height=0,setConstants(t)}function EllipsoidGeodesic(t,a,e){const i=defaultValue_default(e,Ellipsoid_default.WGS84);this._ellipsoid=i,this._start=new Cartographic_default,this._end=new Cartographic_default,this._constants={},this._startHeading=void 0,this._endHeading=void 0,this._distance=void 0,this._uSquared=void 0,defined_default(t)&&defined_default(a)&&computeProperties(this,t,a,i)}Object.defineProperties(EllipsoidGeodesic.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return Check_default.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},startHeading:{get:function(){return Check_default.defined("distance",this._distance),this._startHeading}},endHeading:{get:function(){return Check_default.defined("distance",this._distance),this._endHeading}}}),EllipsoidGeodesic.prototype.setEndPoints=function(t,a){Check_default.defined("start",t),Check_default.defined("end",a),computeProperties(this,t,a,this._ellipsoid)},EllipsoidGeodesic.prototype.interpolateUsingFraction=function(t,a){return this.interpolateUsingSurfaceDistance(this._distance*t,a)},EllipsoidGeodesic.prototype.interpolateUsingSurfaceDistance=function(t,a){Check_default.defined("distance",this._distance);const e=this._constants,i=e.distanceRatio+t/e.b,n=Math.cos(2*i),s=Math.cos(4*i),d=Math.cos(6*i),o=Math.sin(2*i),r=Math.sin(4*i),c=Math.sin(6*i),u=Math.sin(8*i),h=i*i,l=i*h,_=e.u8Over256,f=e.u2Over4,p=e.u6Over64,M=e.u4Over16;let g=2*l*_*n/3+i*(1-f+7*M/4-15*p/4+579*_/64-(M-15*p/4+187*_/16)*n-(5*p/4-115*_/16)*s-29*_*d/16)+(f/2-M+71*p/32-85*_/16)*o+(5*M/16-5*p/4+383*_/96)*r-h*((p-11*_/2)*o+5*_*r/2)+(29*p/96-29*_/16)*c+539*_*u/1536;const m=Math.asin(Math.sin(g)*e.cosineAlpha),C=Math.atan(e.a/e.b*Math.tan(m));g-=e.sigma;const v=Math.cos(2*e.sigma+g),H=Math.sin(g),E=Math.cos(g),O=e.cosineU*E,k=e.sineU*H,b=Math.atan2(H*e.sineHeading,O-k*e.cosineHeading)-computeDeltaLambda(e.f,e.sineAlpha,e.cosineSquaredAlpha,g,H,E,v);return defined_default(a)?(a.longitude=this._start.longitude+b,a.latitude=C,a.height=0,a):new Cartographic_default(this._start.longitude+b,C,0)};var EllipsoidGeodesic_default=EllipsoidGeodesic;export{EllipsoidGeodesic_default};