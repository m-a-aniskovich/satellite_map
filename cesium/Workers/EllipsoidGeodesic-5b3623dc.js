define(["exports","./Matrix3-41c58dde","./Check-6ede7e26","./defaultValue-fe22d8c0","./Math-0a2ac845"],(function(t,a,e,i,n){"use strict";function s(t,a,e,i,n,s,h){const d=function(t,a){return t*a*(4+t*(4-3*a))/16}(t,e);return(1-d)*t*a*(i+d*n*(h+d*s*(2*h*h-1)))}const h=new a.Cartesian3,d=new a.Cartesian3;function o(t,i,o,r){const c=a.Cartesian3.normalize(r.cartographicToCartesian(i,d),h),u=a.Cartesian3.normalize(r.cartographicToCartesian(o,d),d);e.Check.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(a.Cartesian3.angleBetween(c,u))-Math.PI),.0125),function(t,a,e,i,h,d,o){const r=(a-e)/a,c=d-i,u=Math.atan((1-r)*Math.tan(h)),l=Math.atan((1-r)*Math.tan(o)),M=Math.cos(u),g=Math.sin(u),_=Math.cos(l),f=Math.sin(l),p=M*_,C=M*f,m=g*f,H=g*_;let v,O,q,S,b,k=c,U=n.CesiumMath.TWO_PI,w=Math.cos(k),A=Math.sin(k);do{w=Math.cos(k),A=Math.sin(k);const t=C-H*w;let a;q=Math.sqrt(_*_*A*A+t*t),O=m+p*w,v=Math.atan2(q,O),0===q?(a=0,S=1):(a=p*A/q,S=1-a*a),U=k,b=O-2*m/S,isFinite(b)||(b=0),k=c+s(r,a,S,v,q,O,b)}while(Math.abs(k-U)>n.CesiumMath.EPSILON12);const R=S*(a*a-e*e)/(e*e),y=R*(256+R*(R*(74-47*R)-128))/1024,E=b*b,P=e*(1+R*(4096+R*(R*(320-175*R)-768))/16384)*(v-y*q*(b+y*(O*(2*E-1)-y*b*(4*q*q-3)*(4*E-3)/6)/4)),x=Math.atan2(_*A,C-H*w),T=Math.atan2(M*A,C*w-H);t._distance=P,t._startHeading=x,t._endHeading=T,t._uSquared=R}(t,r.maximumRadius,r.minimumRadius,i.longitude,i.latitude,o.longitude,o.latitude),t._start=a.Cartographic.clone(i,t._start),t._end=a.Cartographic.clone(o,t._end),t._start.height=0,t._end.height=0,function(t){const a=t._uSquared,e=t._ellipsoid.maximumRadius,i=t._ellipsoid.minimumRadius,n=(e-i)/e,s=Math.cos(t._startHeading),h=Math.sin(t._startHeading),d=(1-n)*Math.tan(t._start.latitude),o=1/Math.sqrt(1+d*d),r=o*d,c=Math.atan2(d,s),u=o*h,l=u*u,M=1-l,g=Math.sqrt(M),_=a/4,f=_*_,p=f*_,C=f*f,m=1+_-3*f/4+5*p/4-175*C/64,H=1-_+15*f/8-35*p/8,v=1-3*_+35*f/4,O=1-5*_,q=m*c-H*Math.sin(2*c)*_/2-v*Math.sin(4*c)*f/16-O*Math.sin(6*c)*p/48-5*Math.sin(8*c)*C/512,S=t._constants;S.a=e,S.b=i,S.f=n,S.cosineHeading=s,S.sineHeading=h,S.tanU=d,S.cosineU=o,S.sineU=r,S.sigma=c,S.sineAlpha=u,S.sineSquaredAlpha=l,S.cosineSquaredAlpha=M,S.cosineAlpha=g,S.u2Over4=_,S.u4Over16=f,S.u6Over64=p,S.u8Over256=C,S.a0=m,S.a1=H,S.a2=v,S.a3=O,S.distanceRatio=q}(t)}function r(t,e,n){const s=i.defaultValue(n,a.Ellipsoid.WGS84);this._ellipsoid=s,this._start=new a.Cartographic,this._end=new a.Cartographic,this._constants={},this._startHeading=void 0,this._endHeading=void 0,this._distance=void 0,this._uSquared=void 0,i.defined(t)&&i.defined(e)&&o(this,t,e,s)}Object.defineProperties(r.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return e.Check.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},startHeading:{get:function(){return e.Check.defined("distance",this._distance),this._startHeading}},endHeading:{get:function(){return e.Check.defined("distance",this._distance),this._endHeading}}}),r.prototype.setEndPoints=function(t,a){e.Check.defined("start",t),e.Check.defined("end",a),o(this,t,a,this._ellipsoid)},r.prototype.interpolateUsingFraction=function(t,a){return this.interpolateUsingSurfaceDistance(this._distance*t,a)},r.prototype.interpolateUsingSurfaceDistance=function(t,n){e.Check.defined("distance",this._distance);const h=this._constants,d=h.distanceRatio+t/h.b,o=Math.cos(2*d),r=Math.cos(4*d),c=Math.cos(6*d),u=Math.sin(2*d),l=Math.sin(4*d),M=Math.sin(6*d),g=Math.sin(8*d),_=d*d,f=d*_,p=h.u8Over256,C=h.u2Over4,m=h.u6Over64,H=h.u4Over16;let v=2*f*p*o/3+d*(1-C+7*H/4-15*m/4+579*p/64-(H-15*m/4+187*p/16)*o-(5*m/4-115*p/16)*r-29*p*c/16)+(C/2-H+71*m/32-85*p/16)*u+(5*H/16-5*m/4+383*p/96)*l-_*((m-11*p/2)*u+5*p*l/2)+(29*m/96-29*p/16)*M+539*p*g/1536;const O=Math.asin(Math.sin(v)*h.cosineAlpha),q=Math.atan(h.a/h.b*Math.tan(O));v-=h.sigma;const S=Math.cos(2*h.sigma+v),b=Math.sin(v),k=Math.cos(v),U=h.cosineU*k,w=h.sineU*b,A=Math.atan2(b*h.sineHeading,U-w*h.cosineHeading)-s(h.f,h.sineAlpha,h.cosineSquaredAlpha,v,b,k,S);return i.defined(n)?(n.longitude=this._start.longitude+A,n.latitude=q,n.height=0,n):new a.Cartographic(this._start.longitude+A,q,0)},t.EllipsoidGeodesic=r}));