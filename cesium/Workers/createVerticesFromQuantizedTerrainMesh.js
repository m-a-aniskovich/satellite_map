/*! For license information please see createVerticesFromQuantizedTerrainMesh.js.LICENSE.txt */
import{EllipsoidalOccluder_default,TerrainEncoding_default}from"./chunk-SEFDWMCW.js";import{createTaskProcessorWorker_default}from"./chunk-AI3KSNM6.js";import{WebMercatorProjection_default}from"./chunk-K6Q5IRBK.js";import"./chunk-I6TVJ6T7.js";import{AxisAlignedBoundingBox_default}from"./chunk-FGUP2QEP.js";import{IndexDatatype_default}from"./chunk-J3U6Z5YQ.js";import{Transforms_default}from"./chunk-D4YHO4NZ.js";import"./chunk-HSW63JN4.js";import{Cartesian2_default,Matrix4_default,Rectangle_default}from"./chunk-RSWBNJPT.js";import"./chunk-Z6LPXA7S.js";import{Cartesian3_default,Cartographic_default,Ellipsoid_default}from"./chunk-PHQVHDVI.js";import{Math_default}from"./chunk-IZED7ODV.js";import"./chunk-VNRUVNIK.js";import"./chunk-66CXKODF.js";import"./chunk-C53JYYKX.js";import{DeveloperError_default}from"./chunk-7FEGZO3D.js";import{defined_default}from"./chunk-YS4KPNLC.js";function TerrainProvider(){DeveloperError_default.throwInstantiationError()}Object.defineProperties(TerrainProvider.prototype,{errorEvent:{get:DeveloperError_default.throwInstantiationError},credit:{get:DeveloperError_default.throwInstantiationError},tilingScheme:{get:DeveloperError_default.throwInstantiationError},hasWaterMask:{get:DeveloperError_default.throwInstantiationError},hasVertexNormals:{get:DeveloperError_default.throwInstantiationError},availability:{get:DeveloperError_default.throwInstantiationError}});var regularGridIndicesCache=[];TerrainProvider.getRegularGridIndices=function(e,t){if(e*t>=Math_default.FOUR_GIGABYTES)throw new DeveloperError_default("The total number of vertices (width * height) must be less than 4,294,967,296.");let r=regularGridIndicesCache[e];defined_default(r)||(regularGridIndicesCache[e]=r=[]);let a=r[t];return defined_default(a)||(a=e*t<Math_default.SIXTY_FOUR_KILOBYTES?r[t]=new Uint16Array((e-1)*(t-1)*6):r[t]=new Uint32Array((e-1)*(t-1)*6),addRegularGridIndices(e,t,a,0)),a};var regularGridAndEdgeIndicesCache=[];TerrainProvider.getRegularGridIndicesAndEdgeIndices=function(e,t){if(e*t>=Math_default.FOUR_GIGABYTES)throw new DeveloperError_default("The total number of vertices (width * height) must be less than 4,294,967,296.");let r=regularGridAndEdgeIndicesCache[e];defined_default(r)||(regularGridAndEdgeIndicesCache[e]=r=[]);let a=r[t];if(!defined_default(a)){const i=TerrainProvider.getRegularGridIndices(e,t),n=getEdgeIndices(e,t),o=n.westIndicesSouthToNorth,c=n.southIndicesEastToWest,d=n.eastIndicesNorthToSouth,s=n.northIndicesWestToEast;a=r[t]={indices:i,westIndicesSouthToNorth:o,southIndicesEastToWest:c,eastIndicesNorthToSouth:d,northIndicesWestToEast:s}}return a};var regularGridAndSkirtAndEdgeIndicesCache=[];function getEdgeIndices(e,t){const r=new Array(t),a=new Array(e),i=new Array(t),n=new Array(e);let o;for(o=0;o<e;++o)n[o]=o,a[o]=e*t-1-o;for(o=0;o<t;++o)i[o]=(o+1)*e-1,r[o]=(t-o-1)*e;return{westIndicesSouthToNorth:r,southIndicesEastToWest:a,eastIndicesNorthToSouth:i,northIndicesWestToEast:n}}function addRegularGridIndices(e,t,r,a){let i=0;for(let n=0;n<t-1;++n){for(let t=0;t<e-1;++t){const t=i,n=t+e,o=n+1,c=t+1;r[a++]=t,r[a++]=n,r[a++]=c,r[a++]=c,r[a++]=n,r[a++]=o,++i}++i}}function addSkirtIndices(e,t,r,a){let i=e[0];const n=e.length;for(let o=1;o<n;++o){const n=e[o];r[a++]=i,r[a++]=n,r[a++]=t,r[a++]=t,r[a++]=n,r[a++]=t+1,i=n,++t}return a}TerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices=function(e,t){if(e*t>=Math_default.FOUR_GIGABYTES)throw new DeveloperError_default("The total number of vertices (width * height) must be less than 4,294,967,296.");let r=regularGridAndSkirtAndEdgeIndicesCache[e];defined_default(r)||(regularGridAndSkirtAndEdgeIndicesCache[e]=r=[]);let a=r[t];if(!defined_default(a)){const i=e*t,n=(e-1)*(t-1)*6,o=2*e+2*t,c=i+o,d=n+6*Math.max(0,o-4),s=getEdgeIndices(e,t),u=s.westIndicesSouthToNorth,h=s.southIndicesEastToWest,l=s.eastIndicesNorthToSouth,f=s.northIndicesWestToEast,I=IndexDatatype_default.createTypedArray(c,d);addRegularGridIndices(e,t,I,0),TerrainProvider.addSkirtIndices(u,h,l,f,i,I,n),a=r[t]={indices:I,westIndicesSouthToNorth:u,southIndicesEastToWest:h,eastIndicesNorthToSouth:l,northIndicesWestToEast:f,indexCountWithoutSkirts:n}}return a},TerrainProvider.addSkirtIndices=function(e,t,r,a,i,n,o){let c=i;o=addSkirtIndices(e,c,n,o),c+=e.length,o=addSkirtIndices(t,c,n,o),c+=t.length,o=addSkirtIndices(r,c,n,o),c+=r.length,addSkirtIndices(a,c,n,o)},TerrainProvider.heightmapTerrainQuality=.25,TerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap=function(e,t,r){return 2*e.maximumRadius*Math.PI*TerrainProvider.heightmapTerrainQuality/(t*r)},TerrainProvider.prototype.requestTileGeometry=DeveloperError_default.throwInstantiationError,TerrainProvider.prototype.getLevelMaximumGeometricError=DeveloperError_default.throwInstantiationError,TerrainProvider.prototype.getTileDataAvailable=DeveloperError_default.throwInstantiationError,TerrainProvider.prototype.loadTileDataAvailability=DeveloperError_default.throwInstantiationError;var TerrainProvider_default=TerrainProvider,maxShort=32767,cartesian3Scratch=new Cartesian3_default,scratchMinimum=new Cartesian3_default,scratchMaximum=new Cartesian3_default,cartographicScratch=new Cartographic_default,toPack=new Cartesian2_default;function createVerticesFromQuantizedTerrainMesh(e,t){const r=e.quantizedVertices,a=r.length/3,i=e.octEncodedNormals,n=e.westIndices.length+e.eastIndices.length+e.southIndices.length+e.northIndices.length,o=e.includeWebMercatorT,c=e.exaggeration,d=e.exaggerationRelativeHeight,s=1!==c,u=Rectangle_default.clone(e.rectangle),h=u.west,l=u.south,f=u.east,I=u.north,g=Ellipsoid_default.clone(e.ellipsoid),m=e.minimumHeight,p=e.maximumHeight,T=e.relativeToCenter,S=Transforms_default.eastNorthUpToFixedFrame(T,g),_=Matrix4_default.inverseTransformation(S,new Matrix4_default);let E,M;o&&(E=WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(l),M=1/(WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(I)-E));const N=r.subarray(0,a),k=r.subarray(a,2*a),y=r.subarray(2*a,3*a),w=defined_default(i),v=new Array(a),A=new Array(a),P=new Array(a),x=o?new Array(a):[],C=s?new Array(a):[],b=scratchMinimum;b.x=Number.POSITIVE_INFINITY,b.y=Number.POSITIVE_INFINITY,b.z=Number.POSITIVE_INFINITY;const G=scratchMaximum;G.x=Number.NEGATIVE_INFINITY,G.y=Number.NEGATIVE_INFINITY,G.z=Number.NEGATIVE_INFINITY;let W=Number.POSITIVE_INFINITY,D=Number.NEGATIVE_INFINITY,F=Number.POSITIVE_INFINITY,j=Number.NEGATIVE_INFINITY;for(let e=0;e<a;++e){const t=N[e],r=k[e],a=t/maxShort,i=r/maxShort,n=Math_default.lerp(m,p,y[e]/maxShort);cartographicScratch.longitude=Math_default.lerp(h,f,a),cartographicScratch.latitude=Math_default.lerp(l,I,i),cartographicScratch.height=n,W=Math.min(cartographicScratch.longitude,W),D=Math.max(cartographicScratch.longitude,D),F=Math.min(cartographicScratch.latitude,F),j=Math.max(cartographicScratch.latitude,j);const c=g.cartographicToCartesian(cartographicScratch);v[e]=new Cartesian2_default(a,i),A[e]=n,P[e]=c,o&&(x[e]=(WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude)-E)*M),s&&(C[e]=g.geodeticSurfaceNormal(c)),Matrix4_default.multiplyByPoint(_,c,cartesian3Scratch),Cartesian3_default.minimumByComponent(cartesian3Scratch,b,b),Cartesian3_default.maximumByComponent(cartesian3Scratch,G,G)}const V=copyAndSort(e.westIndices,(function(e,t){return v[e].y-v[t].y})),Y=copyAndSort(e.eastIndices,(function(e,t){return v[t].y-v[e].y})),O=copyAndSort(e.southIndices,(function(e,t){return v[t].x-v[e].x})),H=copyAndSort(e.northIndices,(function(e,t){return v[e].x-v[t].x}));let R;m<0&&(R=new EllipsoidalOccluder_default(g).computeHorizonCullingPointPossiblyUnderEllipsoid(T,P,m));let B=m;B=Math.min(B,findMinMaxSkirts(e.westIndices,e.westSkirtHeight,A,v,u,g,_,b,G)),B=Math.min(B,findMinMaxSkirts(e.southIndices,e.southSkirtHeight,A,v,u,g,_,b,G)),B=Math.min(B,findMinMaxSkirts(e.eastIndices,e.eastSkirtHeight,A,v,u,g,_,b,G)),B=Math.min(B,findMinMaxSkirts(e.northIndices,e.northSkirtHeight,A,v,u,g,_,b,G));const U=new AxisAlignedBoundingBox_default(b,G,T),Q=new TerrainEncoding_default(T,U,B,p,S,w,o,s,c,d),L=Q.stride,z=new Float32Array(a*L+n*L);let K=0;for(let e=0;e<a;++e){if(w){const t=2*e;toPack.x=i[t],toPack.y=i[t+1]}K=Q.encode(z,K,P[e],v[e],A[e],toPack,x[e],C[e])}const Z=Math.max(0,2*(n-4)),J=e.indices.length+3*Z,X=IndexDatatype_default.createTypedArray(a+n,J);X.set(e.indices,0);const q=1e-4,$=(D-W)*q,ee=(j-F)*q,te=-$,re=$,ae=ee,ie=-ee;let ne=a*L;return addSkirt(z,ne,V,Q,A,v,i,g,u,e.westSkirtHeight,E,M,te,0),ne+=e.westIndices.length*L,addSkirt(z,ne,O,Q,A,v,i,g,u,e.southSkirtHeight,E,M,0,ie),ne+=e.southIndices.length*L,addSkirt(z,ne,Y,Q,A,v,i,g,u,e.eastSkirtHeight,E,M,re,0),ne+=e.eastIndices.length*L,addSkirt(z,ne,H,Q,A,v,i,g,u,e.northSkirtHeight,E,M,0,ae),TerrainProvider_default.addSkirtIndices(V,O,Y,H,a,X,e.indices.length),t.push(z.buffer,X.buffer),{vertices:z.buffer,indices:X.buffer,westIndicesSouthToNorth:V,southIndicesEastToWest:O,eastIndicesNorthToSouth:Y,northIndicesWestToEast:H,vertexStride:L,center:T,minimumHeight:m,maximumHeight:p,occludeePointInScaledSpace:R,encoding:Q,indexCountWithoutSkirts:e.indices.length}}function findMinMaxSkirts(e,t,r,a,i,n,o,c,d){let s=Number.POSITIVE_INFINITY;const u=i.north,h=i.south;let l=i.east;const f=i.west;l<f&&(l+=Math_default.TWO_PI);const I=e.length;for(let i=0;i<I;++i){const I=e[i],g=r[I],m=a[I];cartographicScratch.longitude=Math_default.lerp(f,l,m.x),cartographicScratch.latitude=Math_default.lerp(h,u,m.y),cartographicScratch.height=g-t;const p=n.cartographicToCartesian(cartographicScratch,cartesian3Scratch);Matrix4_default.multiplyByPoint(o,p,p),Cartesian3_default.minimumByComponent(p,c,c),Cartesian3_default.maximumByComponent(p,d,d),s=Math.min(s,cartographicScratch.height)}return s}function addSkirt(e,t,r,a,i,n,o,c,d,s,u,h,l,f){const I=defined_default(o),g=d.north,m=d.south;let p=d.east;const T=d.west;p<T&&(p+=Math_default.TWO_PI);const S=r.length;for(let d=0;d<S;++d){const S=r[d],_=i[S],E=n[S];cartographicScratch.longitude=Math_default.lerp(T,p,E.x)+l,cartographicScratch.latitude=Math_default.lerp(m,g,E.y)+f,cartographicScratch.height=_-s;const M=c.cartographicToCartesian(cartographicScratch,cartesian3Scratch);if(I){const e=2*S;toPack.x=o[e],toPack.y=o[e+1]}let N,k;a.hasWebMercatorT&&(N=(WebMercatorProjection_default.geodeticLatitudeToMercatorAngle(cartographicScratch.latitude)-u)*h),a.hasGeodeticSurfaceNormals&&(k=c.geodeticSurfaceNormal(M)),t=a.encode(e,t,M,E,cartographicScratch.height,toPack,N,k)}}function copyAndSort(e,t){let r;return"function"==typeof e.slice&&(r=e.slice(),"function"!=typeof r.sort&&(r=void 0)),defined_default(r)||(r=Array.prototype.slice.call(e)),r.sort(t),r}var createVerticesFromQuantizedTerrainMesh_default=createTaskProcessorWorker_default(createVerticesFromQuantizedTerrainMesh);export{createVerticesFromQuantizedTerrainMesh_default as default};