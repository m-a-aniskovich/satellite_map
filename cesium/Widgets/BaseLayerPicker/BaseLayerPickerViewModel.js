import{defaultValue,defined,DeveloperError,EllipsoidTerrainProvider,ImageryLayer,Terrain}from"@cesium/engine";import knockout from"../ThirdParty/knockout.js";import createCommand from"../createCommand.js";function BaseLayerPickerViewModel(e){const r=(e=defaultValue(e,defaultValue.EMPTY_OBJECT)).globe,t=defaultValue(e.imageryProviderViewModels,[]),o=defaultValue(e.terrainProviderViewModels,[]);if(!defined(r))throw new DeveloperError("globe is required");this._globe=r,this.imageryProviderViewModels=t.slice(0),this.terrainProviderViewModels=o.slice(0),this.dropDownVisible=!1,knockout.track(this,["imageryProviderViewModels","terrainProviderViewModels","dropDownVisible"]);const i=knockout.getObservable(this,"imageryProviderViewModels"),n=knockout.pureComputed((function(){const e=i(),r={};let t;for(t=0;t<e.length;t++){const o=e[t],i=o.category;defined(r[i])?r[i].push(o):r[i]=[o]}const o=Object.keys(r),n=[];for(t=0;t<o.length;t++){const e=o[t];n.push({name:e,providers:r[e]})}return n}));this._imageryProviders=n;const s=knockout.getObservable(this,"terrainProviderViewModels"),d=knockout.pureComputed((function(){const e=s(),r={};let t;for(t=0;t<e.length;t++){const o=e[t],i=o.category;defined(r[i])?r[i].push(o):r[i]=[o]}const o=Object.keys(r),i=[];for(t=0;t<o.length;t++){const e=o[t];i.push({name:e,providers:r[e]})}return i}));this._terrainProviders=d,this.buttonTooltip=void 0,knockout.defineProperty(this,"buttonTooltip",(function(){const e=this.selectedImagery,r=this.selectedTerrain,t=defined(e)?e.name:void 0,o=defined(r)?r.name:void 0;return defined(t)&&defined(o)?`${t}\n${o}`:defined(t)?t:o})),this.buttonImageUrl=void 0,knockout.defineProperty(this,"buttonImageUrl",(function(){const e=this.selectedImagery;if(defined(e))return e.iconUrl})),this.selectedImagery=void 0;const a=knockout.observable();this._currentImageryLayers=[],knockout.defineProperty(this,"selectedImagery",{get:function(){return a()},set:function(e){if(a()===e)return void(this.dropDownVisible=!1);let r;const t=this._currentImageryLayers,o=t.length,i=this._globe.imageryLayers;let n=!1;for(r=0;r<o;r++){const e=i.length;for(let o=0;o<e;o++){const e=i.get(o);if(e===t[r]){i.remove(e),n=!0;break}}}if(defined(e)){const t=e.creationCommand();if(Array.isArray(t)){const e=t.length;for(this._currentImageryLayers=[],r=e-1;r>=0;r--){const e=ImageryLayer.fromProviderAsync(t[r]);i.add(e,0),this._currentImageryLayers.push(e)}}else{this._currentImageryLayers=[];const r=ImageryLayer.fromProviderAsync(t);if(r.name=e.name,n)i.add(r,0);else{const e=i.get(0);defined(e)&&i.remove(e),i.add(r,0)}this._currentImageryLayers.push(r)}}a(e),this.dropDownVisible=!1}}),this.selectedTerrain=void 0;const l=knockout.observable();knockout.defineProperty(this,"selectedTerrain",{get:function(){return l()},set:function(e){if(l()===e)return void(this.dropDownVisible=!1);let r;defined(e)&&(r=e.creationCommand());let t=!1;const o=this._globe.terrainProviderChanged.addEventListener((()=>{t=!0,o()})),i=new Terrain(Promise.resolve(r)).readyEvent.addEventListener((e=>{t||(this._globe.depthTestAgainstTerrain=!(e instanceof EllipsoidTerrainProvider),this._globe.terrainProvider=e,i())}));l(e),this.dropDownVisible=!1}});const c=this;this._toggleDropDown=createCommand((function(){c.dropDownVisible=!c.dropDownVisible})),this.selectedImagery=defaultValue(e.selectedImageryProviderViewModel,t[0]),this.selectedTerrain=defaultValue(e.selectedTerrainProviderViewModel,o[0])}Object.defineProperties(BaseLayerPickerViewModel.prototype,{toggleDropDown:{get:function(){return this._toggleDropDown}},globe:{get:function(){return this._globe}}});export default BaseLayerPickerViewModel;