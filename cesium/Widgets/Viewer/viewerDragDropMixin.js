import{CzmlDataSource,defaultValue,defined,DeveloperError,Event,GeoJsonDataSource,getElement,GpxDataSource,KmlDataSource,wrapFunction}from"@cesium/engine";function viewerDragDropMixin(e,r){if(!defined(e))throw new DeveloperError("viewer is required.");if(e.hasOwnProperty("dropTarget"))throw new DeveloperError("dropTarget is already defined by another mixin.");if(e.hasOwnProperty("dropEnabled"))throw new DeveloperError("dropEnabled is already defined by another mixin.");if(e.hasOwnProperty("dropError"))throw new DeveloperError("dropError is already defined by another mixin.");if(e.hasOwnProperty("clearOnDrop"))throw new DeveloperError("clearOnDrop is already defined by another mixin.");if(e.hasOwnProperty("flyToOnDrop"))throw new DeveloperError("flyToOnDrop is already defined by another mixin.");r=defaultValue(r,defaultValue.EMPTY_OBJECT);let o=!0,n=defaultValue(r.flyToOnDrop,!0);const t=new Event;let a=defaultValue(r.clearOnDrop,!0),i=defaultValue(r.dropTarget,e.container),s=defaultValue(r.clampToGround,!0),d=r.proxy;function l(r){stop(r),a&&(e.entities.removeAll(),e.dataSources.removeAll());const o=r.dataTransfer.files,n=o.length;for(let r=0;r<n;r++){const n=o[r],t=new FileReader;t.onload=createOnLoadCallback(e,n,d,s),t.onerror=createDropErrorCallback(e,n),t.readAsText(n)}}i=getElement(i),Object.defineProperties(e,{dropTarget:{get:function(){return i},set:function(e){if(!defined(e))throw new DeveloperError("value is required.");unsubscribe(i,l),i=e,subscribe(i,l)}},dropEnabled:{get:function(){return o},set:function(e){e!==o&&(e?subscribe(i,l):unsubscribe(i,l),o=e)}},dropError:{get:function(){return t}},clearOnDrop:{get:function(){return a},set:function(e){a=e}},flyToOnDrop:{get:function(){return n},set:function(e){n=e}},proxy:{get:function(){return d},set:function(e){d=e}},clampToGround:{get:function(){return s},set:function(e){s=e}}}),subscribe(i,l),e.destroy=wrapFunction(e,e.destroy,(function(){e.dropEnabled=!1})),e._handleDrop=l}function stop(e){e.stopPropagation(),e.preventDefault()}function unsubscribe(e,r){const o=e;defined(o)&&(o.removeEventListener("drop",r,!1),o.removeEventListener("dragenter",stop,!1),o.removeEventListener("dragover",stop,!1),o.removeEventListener("dragexit",stop,!1))}function subscribe(e,r){e.addEventListener("drop",r,!1),e.addEventListener("dragenter",stop,!1),e.addEventListener("dragover",stop,!1),e.addEventListener("dragexit",stop,!1)}function createOnLoadCallback(e,r,o,n){const t=e.scene;return function(a){const i=r.name;try{let s;if(/\.czml$/i.test(i))s=CzmlDataSource.load(JSON.parse(a.target.result),{sourceUri:i});else if(/\.geojson$/i.test(i)||/\.json$/i.test(i)||/\.topojson$/i.test(i))s=GeoJsonDataSource.load(JSON.parse(a.target.result),{sourceUri:i,clampToGround:n});else if(/\.(kml|kmz)$/i.test(i))s=KmlDataSource.load(r,{sourceUri:i,proxy:o,camera:t.camera,canvas:t.canvas,clampToGround:n,screenOverlayContainer:e.container});else{if(!/\.gpx$/i.test(i))return void e.dropError.raiseEvent(e,i,`Unrecognized file: ${i}`);s=GpxDataSource.load(r,{sourceUri:i,proxy:o})}defined(s)&&e.dataSources.add(s).then((function(r){e.flyToOnDrop&&e.flyTo(r)})).catch((function(r){e.dropError.raiseEvent(e,i,r)}))}catch(r){e.dropError.raiseEvent(e,i,r)}}}function createDropErrorCallback(e,r){return function(o){e.dropError.raiseEvent(e,r.name,o.target.error)}}export default viewerDragDropMixin;